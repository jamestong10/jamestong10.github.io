<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | JT's Blog]]></title>
  <link href="https://jamestong10.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="https://jamestong10.github.io/"/>
  <updated>2017-09-09T11:58:15+08:00</updated>
  <id>https://jamestong10.github.io/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Commands]]></title>
    <link href="https://jamestong10.github.io/blog/2016/08/01/git-commands/"/>
    <updated>2016-08-01T00:43:42+08:00</updated>
    <id>https://jamestong10.github.io/blog/2016/08/01/git-commands</id>
    <content type="html"><![CDATA[<blockquote><p>本篇並非Git 教學，只是記錄常用的Git 指令，有學到新的指令會再更新上來
如果不太熟悉可在指令後加入 &ndash;help 查詢用法</p></blockquote>

<!-- more -->


<h2>Git 基本設定</h2>

<p>查詢設定資訊
<code>
git config --list
</code>
設定全域的使用者與Email (個人使用)
<code>
git config --global user.name &lt;author_name&gt;
git config --global user.email &lt;contact_email_address&gt;
</code>
設定區域的使用者與Email (參與計劃或公司專案)
<code>
cd local_repo
git config --local user.name &lt;author_name&gt;
git config --local user.email &lt;contact_email_address&gt;
</code></p>

<p>設定別名
<code>
$ git config --global alias.st status   # git st
$ git config --global alias.ci commit   # git ci
$ git config --global alias.co checkout # git co
$ git config --global alias.br branch   # git br
</code></p>

<p>建立一個全新的Git Repository
<code>
$ git init --bare project_name.git
</code></p>

<p>本機建立新的repository
<code>
$ git init
</code></p>

<p>查看工作區(Working Directory)的異動紀錄
<code>
$ git status
$ git st
</code></p>

<p>查看檔案異動差異
<code>
$ git diff
</code></p>

<p>加入暫存區
<code>
$ git add &lt;--&gt; &lt;file_path | file_name&gt;
</code></p>

<p>提交並加上註解
<code>
$ git commit -m &lt;comments&gt;
</code></p>

<p>開啟editor 修改近期已經commit 的註解 (建議少用，除非必要)
<code>
$ git commit --amend
</code></p>

<p>儲存工作：專案開發到一半，要去別的brach，可使用stash 把修改記錄暫存起來
<code>
$ git stash
</code></p>

<p>查看暫存的紀錄
<code>
$ git stash list
</code></p>

<p>取回暫存的紀錄
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git apply&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;取回較舊的暫存紀錄&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git stash apply stash@{2}</span></code></pre></td></tr></table></div></figure></p>

<p>刪除暫存紀錄：apply 只是取回紀錄，但沒有執行刪除的動作
<code>
$ git stash drop &lt;stash_name&gt;
</code></p>

<p>快速修正前一次 commit 的錯誤，只要修 typo 之後打這行，就會替換掉前一次的 commit-level-operations
<code>
$ git commit -C HEAD -a –amend
</code></p>

<p>查看提交紀錄
<code>
$ git log
</code></p>

<p>砍掉commit 重來
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reset &lt;--soft | --hard&gt; &lt;-q&gt; &lt;commit&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git reset &ndash;soft HEAD^ # HEAD^ 表示前一個版本</span></code></pre></td></tr></table></div></figure></p>

<p>soft: commit 內容會退回暫存區(staging area)，並保留工作區(working directory)</p>

<p>hard: 工作區(working directory) 與暫存區(staging area) 會更新到指定的commit 狀態</p>

<h2>Git Branch</h2>

<p>列出所有分支且正在使用哪個分支
<code>
$ git branch
</code>
建立新的分支
<code>
$ git branch &lt;branch_name&gt;
</code>
切換分支
<code>
$ git checkout &lt;branch_name&gt;
</code>
建立新的分支並切換到此分支 (等於 git branch + git checkout)
<code>
$ git checkout -b &lt;branch_name&gt;
</code>
修改分支名稱與刪除分支
<code>
$ git branch -m &lt;old_branch_name&gt; &lt;new_branch_name&gt;
$ git branch -d &lt;branch_name&gt;
</code></p>

<h2>Git Merge &amp; Git Rebase</h2>

<h3>觀念：只要 branch 調整完畢，應先將 master merge 至 branch，測試無誤後，在 merge 回 master</h3>

<blockquote><p>merge 分支的功能加master，同時會產生新的HEAD</p></blockquote>

<p>合併分支到master
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout master
</span><span class='line'>$ git merge feature1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;上下相同&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git merge master feature1</span></code></pre></td></tr></table></div></figure></p>

<blockquote><p>rebase 是基於某一分支的內容合併，又稱為分支衍合，一樣是合併的動作，但是會銜接著mater 最新的狀態
<code>
$ git checkout &lt;branch]
$ git rebase master
</code>
Merge v.s. Rebase</p></blockquote>

<p><strong>使用時機：如果conflict 較多時，建議使用merge</strong></p>

<p>假設以下例子要做合併，可以看出merge與rebase 有何差異
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maser:  A -&gt; B -&gt; C
</span><span class='line'>branch: D -&gt; E&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;after rebase: A -&gt; B -&gt; C -&gt; D -&gt; E
</span><span class='line'>after merge:  A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F</span></code></pre></td></tr></table></div></figure></p>

<h2>Git Remote</h2>

<p>列出當初加入遠端儲存庫時指定的名稱
<code>
$ git remote
</code>
本機加入遠端repository
<code>
$ git remote add &lt;remote_name&gt; &lt;url&gt;
</code>
修改遠端repository url
<code>
$ git remote set-url &lt;new_remote_name&gt; &lt;url&gt;
</code>
拷貝一個已經存在的repository
<code>
$ git clone &lt;repository_url&gt;
</code>
變更遠端簡稱
<code>
$ git remote rename &lt;old_remote_name&gt; &lt;new_remote_name&gt;
</code>
查看remote 資訊
<code>
$ git remote show &lt;remote_name&gt;
</code>
移除遠端repository
<code>
$ git remote remove &lt;remote_name&gt;
</code>
上傳至遠端repository
<code>
$ git push &lt;remote_name&gt; &lt;branch_name&gt;
</code>
合併遠端repository 至本機
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git pull &lt;remote_name&gt; &lt;branch_name&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;上下相同&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git pull</span></code></pre></td></tr></table></div></figure></p>

<h2>實用資訊</h2>

<ul>
<li><a href="https://github.com/RailsApps/rails-composer/blob/master/files/gitignore.txt">gitignore lists</a></li>
</ul>


<h2>Reference</h2>

<ul>
<li><a href="https://git-scm.com/doc">GitDoc</a></li>
<li><a href="https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf">Git cheat sheet</a></li>
<li><a href="https://ihower.tw/git/basic.html">ihower Git Basic</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/commit-level-operations">tutorial reset, checkout, revert</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
