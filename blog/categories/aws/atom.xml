<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Aws | JT's Blog]]></title>
  <link href="https://jamestong10.github.io/blog/categories/aws/atom.xml" rel="self"/>
  <link href="https://jamestong10.github.io/"/>
  <updated>2017-06-29T21:32:42+08:00</updated>
  <id>https://jamestong10.github.io/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Start and Stop EC2 Instances at Regular Intervals Using Lambda]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/20/start-and-stop-ec2-instances-at-regular-intervals-using-lambda/"/>
    <updated>2017-06-20T22:33:56+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/20/start-and-stop-ec2-instances-at-regular-intervals-using-lambda</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>動機</h2>

<p>在 AWS 運行 EC2 是以時計費的，但 staging 環境，下班後就沒在使用，能否關機 (省錢)</p>

<p>Survey AWS 有提供兩種方案</p>

<ol>
<li>使用 AWS lambda 定時開啟、關閉 EC2 instances</li>
<li>EC2 Spot instances <a href="https://aws.amazon.com/tw/ec2/spot/">(EC2 競價型執行個體)</a></li>
</ol>


<p>原本就想玩 lambda，私心先挑方案一，之後再實驗方案二</p>

<h2>Lambda New Function</h2>

<blockquote><p>start, stop 設定流程是一樣的，下面只介紹 stop</p>

<p>start 再重複一次流程，把 stop 地方改成 start</p></blockquote>

<h3>Blueprint</h3>

<p>先到 AWS Lambda console，選擇 blank function</p>

<p><img src="/images/posts/2017062001.jpg" alt="lambda console" /></p>

<h3>Triggers</h3>

<p>選用 CloudWatch Events，trigger rule 之後再設定</p>

<p><img src="/images/posts/2017062002.jpg" alt="triggers" /></p>

<h3>Lambda function</h3>

<p>輸入 function name、Runtime 選擇 <strong>Python2.7</strong></p>

<p><img src="/images/posts/2017062003.jpg" alt="function" /></p>

<p>function code 調整如下：</p>

<pre><code class="python">import boto3

# Enter the region your instances are in, e.g. 'us-east-1'

region = 'XX-XXXXX-X'

# Enter your instances here: ex. ['X-XXXXXXXX', 'X-XXXXXXXX']

instances = ['X-XXXXXXXX']

def lambda_handler(event, context):

    ec2 = boto3.client('ec2', region_name=region)

    ec2.stop_instances(InstanceIds=instances)

    print 'stopped your instances: ' + str(instances)
</code></pre>

<h3>Role</h3>

<blockquote><p>只要設定一次 start, stop 共用</p></blockquote>

<p>在 role 的下拉選單，選擇 Create a custom role</p>

<p><img src="/images/posts/2017062004.jpg" alt="role" /></p>

<p>Policy Document 調整如下：</p>

<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ec2:Start*",
        "ec2:Stop*"
      ],
      "Resource": "*"
    }
  ]
}
</code></pre>

<h3>Test</h3>

<p>設定完畢，要測試設定是否成功</p>

<p>前往 Lambda console -> Functions</p>

<p>點選 Test 按鈕，會跳出輸入參數視窗，因為此 function 不需要接收參數，可以不用理會直接執行測試</p>

<blockquote><p>請小心，測試時真的執行（哭），如果要測試，就選擇目前狀態做測試，例如：running instance 就測 start instance</p></blockquote>

<h2>CloudWatch</h2>

<p>前往 CloudWatch console -> Events -> Create rule</p>

<p>左邊區塊設定 Event Pattern or Schedule<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">(Cron Expression)</a></p>

<p>選擇 Schedule，使用 Cron expression 設定執行週期</p>

<pre><code># 週一到週五 早上九點start instances
0 1 ? * MON-FRI *
</code></pre>

<p><strong> * EC2 以時計費(eg.跑一分鐘也收一小時的錢），建議整點開、關 </strong></p>

<p><strong> * 使用 UTC 時間，時間要「減8hr」</strong></p>

<p><strong> * 不要怕 cron expressions，AWS 會根據 expression 貼心的產生結果給你 review </strong></p>

<p>右邊設定 target，選擇 Lambda Function，指定要執行哪個 function</p>

<p><img src="/images/posts/2017062005.jpg" alt="CloudWatch events rule" /></p>

<p>最後在設 rule name 就完成了！！</p>

<h2>試算</h2>

<p><strong> 目前狀況 </strong></p>

<ul>
<li>EC2 Instance：t2.micro</li>
<li>EBS：2 GB EBS(SSD)</li>
</ul>


<p>每月花費： $ 0.016 * 24 * 30 + $ 0.12 * 2 = $ 11.76</p>

<p><strong> 導入 CloudWatch Events + Lambda </strong></p>

<ul>
<li>CloudWatch Events：每月前一百萬次免費</li>
<li>Lambda：每月前一百萬次免費</li>
<li>EC2 Instance：t2.micro</li>
<li>EBS:：2 GB EBS(SSD)</li>
</ul>


<p>每月花費： $ 0.016 * 12 * 20 + $ 0.12 * 2 = $ 4.08</p>

<p>費用少了三分之一，有達到目的，但不知還有沒有其他費用產生，會在持續追蹤</p>

<p>另外 spot instances 也是不錯的選擇，再找機會測試</p>

<h2>References</h2>

<ul>
<li><a href="https://aws.amazon.com/tw/premiumsupport/knowledge-center/start-stop-lambda-cloudwatch/">start stop lambda cloudwatch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 使用CarrierWave 上傳圖片 + 上傳AWS S3]]></title>
    <link href="https://jamestong10.github.io/blog/2016/09/02/carrierwave-guide-and-integration-aws-s3/"/>
    <updated>2016-09-02T14:09:46+08:00</updated>
    <id>https://jamestong10.github.io/blog/2016/09/02/carrierwave-guide-and-integration-aws-s3</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>功能介紹</h2>

<h3>修圖軟體</h3>

<ul>
<li><a href="http://imagemagick.org/script/index.php">ImageMagick</a></li>
<li><a href="http://www.graphicsmagick.org/">GraphicsMagick</a></li>
</ul>


<h3>Gems</h3>

<ul>
<li><a href="https://github.com/minimagick/minimagick">MiniMagick</a> 透過Ruby 使用ImageMagick、GraphicsMagick 的gem</li>
<li><a href="https://github.com/rmagick/rmagick">RMagick</a> 透過Ruby 使用ImageMagick</li>
<li><a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> 上傳檔案的gem</li>
</ul>


<h2>ImageMagick</h2>

<p>需要安裝，否則後面的圖片操作都會失敗</p>

<pre><code>$ brew isntall imagemagick
</code></pre>

<p>檢查是否安裝成功</p>

<pre><code>$ convert -version
Version: ImageMagick 6.8.9-7 Q16 x86_64 2014-09-11 http://www.imagemagick.org
Copyright: Copyright (C) 1999-2014 ImageMagick Studio LLC
Features: DPC Modules
Delegates: bzlib fftw freetype jng jpeg lcms ltdl lzma png tiff xml zlib
</code></pre>

<h2>Install Gems</h2>

<pre><code># Gemfile
# 二擇一
gem 'mini_magick'
# gem 'rmagick'

gem 'carrierwave'

$ bundle install
</code></pre>

<h2>Uploader</h2>

<p>建立uploader，命名爲image （自行決定, e.g.,file, photo &hellip; etc.）</p>

<pre><code>$ rails g uploader image
</code></pre>

<p>設定Uploader</p>

<pre><code># app/uploaders/image_uploader.rb

class ImageUploader &lt; CarrierWave::Uploader::Base

  include CarrierWave::MiniMagick # 指定使用minimagick

  storage :file

  def store_dir
    "uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
  end

  # 指定圖片size (同時產生其他size :thumb, :medium)
  process :resize_to_fit =&gt; [800, 600]

  version :thumb do
    process :resize_to_fill =&gt; [200,120]
  end

  version :medium do
    process :resize_to_fill =&gt; [400,300]
  end

end
</code></pre>

<h2>Model</h2>

<p>建立Model，命名為photo （自行決定, e.g.,file, photo, dog, cat !!?? etc.）</p>

<pre><code>$ rails g model photo image:string
$ rake db:migrate
</code></pre>

<p>設定 model 的uploader</p>

<pre><code># app/models/photo.rb
class Photo &lt; ActiveRecord::Base
  mount_uploader :image, ImageUploader
end
</code></pre>

<h2>gitignore</h2>

<p>排除測試上傳的圖片</p>

<pre><code># .gitignore
public/uploads
</code></pre>

<h1>上傳AWS S3</h1>

<h2>Install Gems</h2>

<pre><code># Gemfile
gem 'fog', group: :production
</code></pre>

<h2>Uploader 設定Production 圖片透過fog 連接並儲存至AWS S3</h2>

<pre><code>if Rails.env.production?
  storage :fog
else
  storage :file
end
</code></pre>

<h2>CarrierWave 加入fog credentials 的設定</h2>

<pre><code># config/initializers/carrier_wave.rb
CarrierWave.configure do |config|
  if Rails.env.production?
    config.storage = :fog
    config.fog_credentials = {
      provider:              'AWS',
      aws_access_key_id:     ENV['AWS_ACCESS_KEY_ID'],
      aws_secret_access_key: ENV['AWS_SECRET_ACCESS_KEY'],
      region:                ENV['AWS_REGION']
    }
    config.fog_directory  =  ENV['AWS_S3_BUCKET_PRODUCTION']
  else
    config.storage :file
  end
end
</code></pre>

<h2>AWS Variables</h2>

<p>列出不同VPS 如何管理AWS 的變數</p>

<ul>
<li>Heroku : Settings > Cofig Variables</li>
<li>AWS: figrao</li>
</ul>

]]></content>
  </entry>
  
</feed>
