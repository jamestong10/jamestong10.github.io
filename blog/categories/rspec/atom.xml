<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rspec | JT's Blog]]></title>
  <link href="https://jamestong10.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="https://jamestong10.github.io/"/>
  <updated>2017-06-09T22:13:20+08:00</updated>
  <id>https://jamestong10.github.io/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSpec]]></title>
    <link href="https://jamestong10.github.io/blog/2017/05/23/rspec/"/>
    <updated>2017-05-23T11:32:44+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/05/23/rspec</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>介紹</h2>

<ul>
<li>用來測試 Ruby / Rails 的測試工具</li>
<li>程式開發過程，可以確保程式的正確性，也可以讓開發人員有效的重構</li>
<li>當成一種程式文件</li>
</ul>


<h2>慣例</h2>

<ol>
<li>一個 <em>.rb 要搭配同名的 </em>_spec.rb</li>
<li><code>#method</code> 表示 instance method, <code>.method</code> 表示class method</li>
<li>在 Rails 寫 RSpec 建議順序 Model > Controller > View</li>
</ol>


<h2>安裝</h2>

<pre><code class="ruby"># Gemfile
group :development, :test do
  gem 'rspec-rails'
end

$ rails generate rspec:install
</code></pre>

<p>設定取消自動產生 rspec</p>

<pre><code># config/application.rb

class Application &lt; Rails::Application
  config.generators do |g|
    g.controller_specs false
    g.model_specs false
    g.view_specs false
    g.helper_specs false
    g.routing_specs false
    g.request_specs false
  end
end
</code></pre>

<h2>測試指令</h2>

<ul>
<li><code>rspec</code> 全部測試</li>
<li><code>rspec spec/controllers</code> 整個資料夾測試</li>
<li><code>rspec filename_spec.rb</code> 單一檔案測試</li>
<li><code>rspec filename_spec.rb:linenumber</code> 執行某行之後的測試</li>
</ul>


<h2>輸出</h2>

<p>預設不產出文件</p>

<ul>
<li>產生document 並輸出 specdoc  文件
<code>
$ rspec spec --format documentation --out rspec_result.txt
$ rspec spec -fd -o rspec_result.txt
</code></li>
<li>輸出 html 文件
<code>
$ rspec spec --format html --out rspec_result.html
$ rspec spec -fh -o rspec_result.html
</code></li>
</ul>


<h2>Describe / Context / it</h2>

<p>RSpec 的主要區塊，所有的測試都寫在 describe 裡面，裡面則包含多個 context、it 測試</p>

<p>descirbe 超過 40 個字，就需要使用 context、it 分段，讓你的測試更明確、有條理，保持可讀性</p>

<h2>Before &amp; After</h2>

<p>同unit test 的setup 與teardown</p>

<ul>
<li>before(:each) 每段it之前執行</li>
<li>before(:all)  整段describe前只執行一次</li>
<li>after(:each)  每段it之後執行</li>
<li>after(:all)   整段describe後只執行一次</li>
</ul>


<h2>let &amp; let!</h2>

<ul>
<li>let 用到的時候再會被執行</li>
<li>let! 每個測試前都會執行</li>
</ul>


<p>建議用 let 代替 before 來建立 instance variable</p>

<p>因為 let 有 lazy load 特性，只在測項第一次用到該 variable 時被執行，並且會 cache 直到該測項結束</p>

<p>這個技巧在產生 database 內容以測試 query 和 scope 時十分好用</p>

<h2>Stubs</h2>

<p>Stub: For replacing a method with code that returns a specified result.</p>

<ul>
<li>用stub 假造 method，讓它忽略這個 method，或是指定回傳東西，可以避免在測試時，測試不必要的東西。</li>
<li>專注於要測試的東西，如果 method 有呼叫其他 method 就可以 stub 掉</li>
<li>製造假物件，指定這個假物件能回應哪些訊息，還有對應的回傳值，讓要測試的主角，在執行過程中一些地方，能獲得一致的結果</li>
<li>要測試的 model</li>
</ul>


<h2>Mocks</h2>

<p>Mock: A stub with an expectations that the method gets called.</p>

<ul>
<li>假造 method，不只忽略這個 method ，並且期望被呼叫到</li>
<li>「模擬」與一個「協作者」的互動，設立一個「會收到指定訊息」的期望，去驗證互動是否真的有發生。</li>
<li>簡單來說 mock 就是 stub + expectation , 說它是 stub 是因為它也可以像 stub 一樣偽造方法, 阻斷對原來方法的調用, expectation 是說它不僅偽造了這個方法,它還期望你(必須)調用這個方法,如果沒有被調用到,這個 test 就 fail 了</li>
<li>一樣製造假物件，但是現在我們改對這個假物件斷言，在主角的執行過程中，應該要收到什麼訊息、收到的訊息應該夾帶什麼參數、訊息收到的次數…等等，但是會有程式碼的流程些微不自然的問題（準備、斷言、（準備）、執行）</li>
</ul>


<p>使用 mock objects，在 RSpec 裡面叫做 double（替身），來取代「外部邏輯」資料</p>

<pre><code># 讓 Post.save 失敗
allow_any_instance_of(Post).to receive(:save).and_return(false)

# 讓 Post.update 失敗
allow_any_instance_of(Post).to receive(:update).and_return(false)
</code></pre>

<h2>Controller Specs</h2>

<p>Examples
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rails_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe TeamsController, :type =&gt; :controller do</span>
</span><span class='line'><span class="sr">  describe &amp;ldquo;GET index&amp;rdquo; do</span>
</span><span class='line'><span class="sr">    it &amp;ldquo;assigns @teams&amp;rdquo; do</span>
</span><span class='line'><span class="sr">      team = Team.create</span>
</span><span class='line'><span class="sr">      get :index</span>
</span><span class='line'><span class="sr">      expect(assigns(:teams)).to eq([team])</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">it</span> <span class="s2">&quot;renders the index template&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Matchers</p>

<ul>
<li><p>render_template
<code>
expect(response).to render_template(:new)
</code></p></li>
<li><p>redirect_to
<code>
expect(response).to redirect_to(location)
</code></p></li>
<li><p>have_http_status
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:created</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;success 就有四種寫法 XD&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:success</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;page not found&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>be_a_new
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:widget</span><span class="p">)</span> <span class="err">表示</span> <span class="n">action</span> <span class="err">要回傳的</span> <span class="vi">@widget</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;be_a_new 只是否等同 Widget.new&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:widget</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a_new</span><span class="p">(</span><span class="no">Widget</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<h2>Model Specs</h2>

<p>Examples</p>

<p>使用 reload 重新載入資料</p>

<pre><code class="ruby">require "rails_helper"

describe Post, :type =&gt; :model do
  context "with 2 or more comments" do
    it "orders them in reverse chronologically" do
      post = Post.create!
      comment1 = post.comments.create!(:body =&gt; "first comment")
      comment2 = post.comments.create!(:body =&gt; "second comment")
      expect(post.reload.comments).to eq([comment2, comment1])
    end
  end
end
</code></pre>

<p>取消 transactions</p>

<pre><code class="ruby">require "rails_helper"

RSpec.configure do |c|
  c.use_transactional_examples = false
  c.order = "defined"
end

describe Widget, :type =&gt; :model do
  it "has none to begin with" do
    expect(Widget.count).to eq 0
  end

  it "has one after adding one" do
    Widget.create
    expect(Widget.count).to eq 1
  end

  # 關閉 transactions，剛剛建立的 Widget 就不會消失
  it "has one after one was created in a previous example" do
    expect(Widget.count).to eq 1
  end

  after(:all) { Widget.destroy_all }
end
</code></pre>

<h2>Routing Specs</h2>

<pre><code class="ruby">describe "posts", :type =&gt; :routing do

  expect(:get =&gt; "/events").to route_to("events#index")
  expect(:get =&gt; "/widgets/1/edit").not_to be_routable

  expect(:get =&gt; "/posts/1").to route_to(
        :controller =&gt; "posts",
        :action =&gt; "show",
        :id =&gt; "1"
        )
end
</code></pre>

<h2>:type => ??</h2>

<p>設定 type 為 controller / model / routing 是 rspec metadata，可以讓 rspec 知道目前的 type</p>

<p>當然也可以在 rails_helper 加入設定，這樣就不需要再每個 spec 檔都加入 type ，只要把檔案放在對應的資料夾，就可以代表該檔案的type</p>

<p>e.g. spec/models -> 認定為 model</p>

<pre><code># rails_helper
config.infer_spec_type_from_file_location!
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://www.relishapp.com/rspec/rspec-rails/v/3-5/docs">RSpec Rails 3.5</a></li>
<li><a href="http://betterspecs.org/zh_tw/">Better Specs</a></li>
<li><a href="http://motion-express.com/trainings/rspec-rails-1">特快車-RSpec-Rails</a></li>
<li><a href="http://mgleon08.github.io/blog/2016/01/29/rspec-plus-factory-girl/">用 Rspec + Factory Girl + CircleCi 寫測試</a></li>
<li><a href="https://github.com/festime/stubs-mocks-spies-in-rspec">了解 Stubs, Mocks, and Spies</a></li>
<li><a href="https://xdite.gitbooks.io/rspec-101/content/">RSpec on Rails 101</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
