<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rspec | JT's Blog]]></title>
  <link href="https://jamestong10.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="https://jamestong10.github.io/"/>
  <updated>2019-07-21T16:29:27+08:00</updated>
  <id>https://jamestong10.github.io/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSpec Double / Stubs / Mocks]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/16/rspec-double-stubs-mocks/"/>
    <updated>2017-06-16T10:06:25+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/16/rspec-double-stubs-mocks</id>
    <content type="html"><![CDATA[<!-- more -->


<p>原本放在 <a href="/blog/2017/05/23/rspec/">RSpec</a>，但是越寫越多，就把它獨立成一篇</p>

<h2>Double</h2>

<p>RSpec 裡面叫做 double（替身），目的是用來建立替身（假物件）</p>

<pre><code class="ruby"># 建立一個假的 User object 並設定是 admin
describe "double demo" do
  it "user is an admin" do
    user = double("User", name: 'james', is_admin: true)
    expect(user.is_admin).to be_truthy
  end
end
</code></pre>

<h3>Partial Test Doubles</h3>

<p>設定 class method return value</p>

<pre><code class="ruby">describe "partial test doubles" do
  it "partial test doubles" do

    allow(User).to receive(:find).and_return("100")

    expect(User.find).to eq("100")
  end
end
</code></pre>

<h3>Null object doubles</h3>

<p>使用 <code>as_null_object</code>，確保執行未知的 method 不會出錯誤並回傳自己</p>

<pre><code class="ruby">describe "null object doubles" do
  it "null object doubles" do

    dbl = double("Some Collaborator").as_null_object

    expect(dbl.foo.bar).to be dbl
  end
end
</code></pre>

<h3>Spies</h3>

<p>TBD</p>

<h3>Scope</h3>

<p>TBD</p>

<h2>Stubs</h2>

<blockquote><p>Stub 「不管邏輯、過程，只要建立假 method 並回傳資料或狀態」</p></blockquote>

<p>Stub 手法用在要驗證 「回傳值」 或驗證 「狀態改變時」</p>

<p>rspec 3 之後改用 <code>#allow</code> 取代 <code>#stub</code></p>

<p><img src="/images/posts/2017061601.jpg" alt="stub" />
(source: <a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs">test-doubles&mdash;fakes-mocks-and-stubs</a>)</p>

<p>Stubs 不管 <code>#list_student_names</code> 中間執行哪些動作，只管最後回傳結果</p>

<pre><code class="ruby">describe ClassRoom do
  it 'the list_student_names method should work correctly' do
    student1 = double('student')
    student2 = double('student')

    # 使用 stub 回傳假資料 (Rails 3 之前)
    #student1.stub(:name).and_return('John Smith')
    #student2.stub(:name).and_return('Jill Smith')

    # 使用 allow 取代 stub 回傳假資料 (Rails 3 之後)
    allow(student1).to receive(:name).and_return('John Smith')
    allow(student2).to receive(:name).and_return('Jill Smith')

    class_room = ClassRoom.new [student1,student2]
    expect(class_room.students_count).to eq(2)
    expect(class_room.list_student_names).to eq('John Smith,Jill Smith')
  end
end
</code></pre>

<h2>Mocks</h2>

<blockquote><p>Mock 「模擬一物件有相同的介面，測試一個 「會收到指定訊息」 的期望，去驗證互動是否真的有發生」</p></blockquote>

<p>Mock 的手法用在互動並取得預期結果</p>

<p>使用double 建立替身，產生互動過程，提供預期結果</p>

<p><img src="/images/posts/2017061602.jpg" alt="mock" />
(source: <a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs">test-doubles&mdash;fakes-mocks-and-stubs</a>)</p>

<h3>範例：</h3>

<p>實作 class ClassRoom</p>

<pre><code class="ruby">class ClassRoom
  def initialize(students)
    @students = students
  end

  def list_student_names
    update_student_count_of_classroom
    send_mail_notify_teacher
    @students.map(&amp;:name).join(',')
  end

  def students_count
    @students.count
  end
end
</code></pre>

<p>使用 double 建立假物件</p>

<pre><code class="ruby">describe ClassRoom do
  it 'the list_student_names method should work correctly' do
    student1 = double('student')
    student2 = double('student')

    class_room = ClassRoom.new [student1,student2]
    expect(class_room.students_count).to eq(2)
  end
end
</code></pre>

<h2>Mocks vs. Stubs</h2>

<blockquote><p>Behavioral testing vs State testing</p></blockquote>

<h2>補充：Types of test double</h2>

<p>The term “test double” is used to refer to a range of testing techniques, with the common theme that a substitute object is provided to the subject under test, taking the place of the objects it will communicate with in actual use.</p>

<ul>
<li>Dummy – a pure placeholder object with no behaviour (it doesn’t respond to any messages). This is used when a method requires an argument but doesn’t interact with it in a specific test.
Fake – a replacement object with real behaviour, but taking shortcuts that are helpful for testing purposes (a good example is using an in-memory database for faster testing of database-dependent code).</li>
<li>Stub – an object providing canned responses to specified messages.</li>
<li>Mock – an object that is given a specification of the messages that it must receive (or not receive) during the test if the test is to pass.</li>
<li>Spy – an object that records all messages it receives (assuming it is allowed to respond to them), allowing the messages it should have received to be asserted at the end of a test.</li>
</ul>


<h2>Reference</h2>

<ul>
<li><a href="https://relishapp.com/rspec/rspec-mocks/v/3-6/docs/basics">Rspec Mocks 3.6</a></li>
<li><a href="https://about.futurelearn.com/blog/stubs-mocks-spies-rspec/">Stubs, Mocks and Spies in RSpec</a></li>
<li><a href="https://stackoverflow.com/a/17810004">whats-the-difference-between-a-mock-stub</a></li>
<li><a href="https://stackoverflow.com/questions/7340808/whats-the-difference-between-mock-stub-and-factory-girl">What&rsquo;s the difference between mock, stub, and factory girl?</a></li>
<li><a href="https://github.com/festime/stubs-mocks-spies-in-rspec">了解 Stubs, Mocks, and Spies</a></li>
<li><a href="http://blog.xdite.net/posts/2016/06/11/rspec-advanced-concept-part-1">RSpec - 進階測試系列概念</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/mocking-with-rspec-doubles-and-expectations">Mocking with RSpec: Doubles and Expectations</a></li>
<li><a href="https://stackoverflow.com/questions/5164102/mocks-and-stubs">Mocks and Stubs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec]]></title>
    <link href="https://jamestong10.github.io/blog/2017/05/23/rspec/"/>
    <updated>2017-05-23T11:32:44+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/05/23/rspec</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>介紹</h2>

<ul>
<li>用來測試 Ruby / Rails 的測試工具</li>
<li>程式開發過程，可以確保程式的正確性，也可以讓開發人員有效的重構</li>
<li>當成一種程式文件</li>
</ul>


<h2>慣例</h2>

<ol>
<li>一個 <em>.rb 要搭配同名的 </em>_spec.rb</li>
<li><code>#method</code> 表示 instance method, <code>.method</code> 表示class method</li>
<li>在 Rails 寫 RSpec 建議順序 Model > Controller > View</li>
</ol>


<h2>安裝</h2>

<pre><code class="ruby"># Gemfile
group :development, :test do
  gem 'rspec-rails'
end

$ rails generate rspec:install
</code></pre>

<p>設定取消自動產生 rspec</p>

<pre><code># config/application.rb

class Application &lt; Rails::Application
  config.generators do |g|
    g.controller_specs false
    g.model_specs false
    g.view_specs false
    g.helper_specs false
    g.routing_specs false
    g.request_specs false
  end
end
</code></pre>

<h2>測試指令</h2>

<ul>
<li><code>rspec</code> 全部測試</li>
<li><code>rspec spec/controllers</code> 整個資料夾測試</li>
<li><code>rspec filename_spec.rb</code> 單一檔案測試</li>
<li><code>rspec filename_spec.rb:linenumber</code> 執行某行之後的測試</li>
</ul>


<h2>輸出</h2>

<p>預設不產出文件</p>

<ul>
<li>產生document 並輸出 specdoc  文件
<code>
$ rspec spec --format documentation --out rspec_result.txt
$ rspec spec -fd -o rspec_result.txt
</code></li>
<li>輸出 html 文件
<code>
$ rspec spec --format html --out rspec_result.html
$ rspec spec -fh -o rspec_result.html
</code></li>
</ul>


<h2>Describe / Context / it</h2>

<p>RSpec 的主要區塊，所有的測試都寫在 describe 裡面，裡面則包含多個 context、it 測試</p>

<p>descirbe 超過 40 個字，就需要使用 context、it 分段，讓你的測試更明確、有條理，保持可讀性</p>

<h2>Before &amp; After</h2>

<p>同unit test 的setup 與teardown</p>

<ul>
<li>before(:each) 每段it之前執行</li>
<li>before(:all)  整段describe前只執行一次</li>
<li>after(:each)  每段it之後執行</li>
<li>after(:all)   整段describe後只執行一次</li>
</ul>


<h2>let &amp; let!</h2>

<ul>
<li>let 用到的時候再會被執行</li>
<li>let! 每個測試前都會執行</li>
</ul>


<p>建議用 let 代替 before 來建立 instance variable</p>

<p>因為 let 有 lazy load 特性，只在測項第一次用到該 variable 時被執行，並且會 cache 直到該測項結束</p>

<p>這個技巧在產生 database 內容以測試 query 和 scope 時十分好用</p>

<h2>Controller Specs</h2>

<p>Examples
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rails_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe TeamsController, :type =&gt; :controller do</span>
</span><span class='line'><span class="sr">  describe &amp;ldquo;GET index&amp;rdquo; do</span>
</span><span class='line'><span class="sr">    it &amp;ldquo;assigns @teams&amp;rdquo; do</span>
</span><span class='line'><span class="sr">      team = Team.create</span>
</span><span class='line'><span class="sr">      get :index</span>
</span><span class='line'><span class="sr">      expect(assigns(:teams)).to eq([team])</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">it</span> <span class="s2">&quot;renders the index template&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Matchers</p>

<ul>
<li><p>render_template
<code>
expect(response).to render_template(:new)
</code></p></li>
<li><p>redirect_to
<code>
expect(response).to redirect_to(location)
</code></p></li>
<li><p>have_http_status
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:created</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;success 就有四種寫法 XD&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:success</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;page not found&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>be_a_new
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:widget</span><span class="p">)</span> <span class="err">表示</span> <span class="n">action</span> <span class="err">要回傳的</span> <span class="vi">@widget</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;be_a_new 只是否等同 Widget.new&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:widget</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a_new</span><span class="p">(</span><span class="no">Widget</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<h2>Model Specs</h2>

<p>Examples</p>

<p>使用 reload 重新載入資料</p>

<pre><code class="ruby">require "rails_helper"

describe Post, :type =&gt; :model do
  context "with 2 or more comments" do
    it "orders them in reverse chronologically" do
      post = Post.create!
      comment1 = post.comments.create!(:body =&gt; "first comment")
      comment2 = post.comments.create!(:body =&gt; "second comment")
      expect(post.reload.comments).to eq([comment2, comment1])
    end
  end
end
</code></pre>

<p>取消 transactions</p>

<pre><code class="ruby">require "rails_helper"

RSpec.configure do |c|
  c.use_transactional_examples = false
  c.order = "defined"
end

describe Widget, :type =&gt; :model do
  it "has none to begin with" do
    expect(Widget.count).to eq 0
  end

  it "has one after adding one" do
    Widget.create
    expect(Widget.count).to eq 1
  end

  # 關閉 transactions，剛剛建立的 Widget 就不會消失
  it "has one after one was created in a previous example" do
    expect(Widget.count).to eq 1
  end

  after(:all) { Widget.destroy_all }
end
</code></pre>

<h2>Routing Specs</h2>

<pre><code class="ruby">describe "posts", :type =&gt; :routing do

  expect(:get =&gt; "/events").to route_to("events#index")
  expect(:get =&gt; "/widgets/1/edit").not_to be_routable

  expect(:get =&gt; "/posts/1").to route_to(
        :controller =&gt; "posts",
        :action =&gt; "show",
        :id =&gt; "1"
        )
end
</code></pre>

<h2>:type => ?</h2>

<p>設定 type 為 controller / model / routing 是 rspec metadata，可以讓 rspec 知道目前的 type</p>

<pre><code class="ruby">desc "posts", :type =&gt; :controller do
  # ...
end
</code></pre>

<p>當然也可在 rails_helper 設定 type 參考檔案目錄</p>

<pre><code class="ruby"># spec/rails_helper
config.infer_spec_type_from_file_location!
</code></pre>

<p>只要把檔案放在對應的資料夾，即代表該檔案的 type</p>

<pre><code class="ruby"># spec/controllers/
desc "posts" do
  # ...
end
</code></pre>

<h2>進階</h2>

<p><a href="/blog/2017/06/16/rspec-double-stubs-mocks/">RSpec Double / Stubs / Mocks</a></p>

<h2>Reference</h2>

<ul>
<li><a href="http://www.relishapp.com/rspec/rspec-rails/v/3-5/docs">RSpec Rails 3.5</a></li>
<li><a href="http://betterspecs.org/zh_tw/">Better Specs</a>- <a href="http://motion-express.com/trainings/rspec-rails-1">特快車-RSpec-Rails</a></li>
<li><a href="http://mgleon08.github.io/blog/2016/01/29/rspec-plus-factory-girl/">用 Rspec + Factory Girl + CircleCi 寫測試</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
