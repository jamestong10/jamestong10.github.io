<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | JT's Blog]]></title>
  <link href="http://rt-tong.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://rt-tong.com/"/>
  <updated>2017-05-16T13:53:29+08:00</updated>
  <id>http://rt-tong.com/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 使用CarrierWave 上傳圖片 + 上傳AWS S3]]></title>
    <link href="http://rt-tong.com/blog/2016/09/02/carrierwave-guide-and-integration-aws-s3/"/>
    <updated>2016-09-02T14:09:46+08:00</updated>
    <id>http://rt-tong.com/blog/2016/09/02/carrierwave-guide-and-integration-aws-s3</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>功能介紹</h2>

<h3>修圖軟體</h3>

<ul>
<li><a href="http://imagemagick.org/script/index.php">ImageMagick</a></li>
<li><a href="http://www.graphicsmagick.org/">GraphicsMagick</a></li>
</ul>


<h3>Gems</h3>

<ul>
<li><a href="https://github.com/minimagick/minimagick">MiniMagick</a> 透過Ruby 使用ImageMagick、GraphicsMagick 的gem</li>
<li><a href="https://github.com/rmagick/rmagick">RMagick</a> 透過Ruby 使用ImageMagick</li>
<li><a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> 上傳檔案的gem</li>
</ul>


<h2>ImageMagick</h2>

<p>需要安裝，否則後面的圖片操作都會失敗</p>

<pre><code>$ brew isntall imagemagick
</code></pre>

<p>檢查是否安裝成功</p>

<pre><code>$ convert -version
Version: ImageMagick 6.8.9-7 Q16 x86_64 2014-09-11 http://www.imagemagick.org
Copyright: Copyright (C) 1999-2014 ImageMagick Studio LLC
Features: DPC Modules
Delegates: bzlib fftw freetype jng jpeg lcms ltdl lzma png tiff xml zlib
</code></pre>

<h2>Install Gems</h2>

<pre><code># Gemfile
# 二擇一
gem 'mini_magick'
# gem 'rmagick'

gem 'carrierwave'

$ bundle install
</code></pre>

<h2>Uploader</h2>

<p>建立uploader，命名爲image （自行決定, e.g.,file, photo &hellip; etc.）</p>

<pre><code>$ rails g uploader image
</code></pre>

<p>設定Uploader</p>

<pre><code># app/uploaders/image_uploader.rb

class ImageUploader &lt; CarrierWave::Uploader::Base

  include CarrierWave::MiniMagick # 指定使用minimagick

  storage :file

  def store_dir
    "uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
  end

  # 指定圖片size (同時產生其他size :thumb, :medium)
  process :resize_to_fit =&gt; [800, 600]

  version :thumb do
    process :resize_to_fill =&gt; [200,120]
  end

  version :medium do
    process :resize_to_fill =&gt; [400,300]
  end

end
</code></pre>

<h2>Model</h2>

<p>建立Model，命名為photo （自行決定, e.g.,file, photo, dog, cat !!?? etc.）</p>

<pre><code>$ rails g model photo image:string
$ rake db:migrate
</code></pre>

<p>設定 model 的uploader</p>

<pre><code># app/models/photo.rb
class Photo &lt; ActiveRecord::Base
  mount_uploader :image, ImageUploader
end
</code></pre>

<h2>gitignore</h2>

<p>排除測試上傳的圖片</p>

<pre><code># .gitignore
public/uploads
</code></pre>

<h1>上傳AWS S3</h1>

<h2>Install Gems</h2>

<pre><code># Gemfile
gem 'fog', group: :production
</code></pre>

<h2>Uploader 設定Production 圖片透過fog 連接並儲存至AWS S3</h2>

<pre><code>if Rails.env.production?
  storage :fog
else
  storage :file
end
</code></pre>

<h2>CarrierWave 加入fog credentials 的設定</h2>

<pre><code># config/initializers/carrier_wave.rb
CarrierWave.configure do |config|
  if Rails.env.production?
    config.storage = :fog
    config.fog_credentials = {
      provider:              'AWS',
      aws_access_key_id:     ENV['AWS_ACCESS_KEY_ID'],
      aws_secret_access_key: ENV['AWS_SECRET_ACCESS_KEY'],
      region:                ENV['AWS_REGION']
    }
    config.fog_directory  =  ENV['AWS_S3_BUCKET_PRODUCTION']
  else
    config.storage :file
  end
end
</code></pre>

<h2>AWS Variables</h2>

<p>列出不同VPS 如何管理AWS 的變數</p>

<ul>
<li>Heroku : Settings > Cofig Variables</li>
<li>AWS: figrao</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails - I18n | Timezone]]></title>
    <link href="http://rt-tong.com/blog/2016/09/01/rails-i18n-timezone/"/>
    <updated>2016-09-01T11:35:19+08:00</updated>
    <id>http://rt-tong.com/blog/2016/09/01/rails-i18n-timezone</id>
    <content type="html"><![CDATA[<blockquote><p>國際化的設計，根據不同使用者採用不同的語言、數字格式、日期格式，簡稱i18n</p></blockquote>

<!-- more -->


<h2>i18n</h2>

<p>Rails 預設是使用英文(en)，如要使用i18n 多語系，則需安裝 gem</p>

<pre><code>gem 'rails-i18n'
</code></pre>

<p>設定載入路徑、預設語系</p>

<pre><code>#config/application.rb

# 設定載入路徑 (二擇一)
config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '**', '*.{rb,yml}')]
config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '*.{rb,yml}').to_s]

# 設定預設語系 zh or en (二擇一)
config.i18n.default_locale = :"zh-TW"
config.i18n.default_locale = :en

# use default locale when translation missing (二擇一)
config.i18n.fallbacks = true
config.i18n.fallbacks = :"zh-TW"
</code></pre>

<h2>自訂語彙</h2>

<p>詞彙檔放在 config/locales ，使用YAML 格式</p>

<pre><code># config/locales/zh-TW.yml
"zh-TW":
    hello: "親愛的%{name}你好!"
    admin:
        event: 活動管理
</code></pre>

<blockquote><p>注意 YAML 格式的縮排必須使用兩個空格，Tab是不允許的。直接複製貼上可能會有問題，請小心檢查縮排</p></blockquote>

<p>套用語彙，可以使用<code>t Helper</code></p>

<pre><code># 如果在View
t("admin.event")
t(:event, :scope=&gt;:admin)
t(:hello, :name=&gt;current_user.name)

# 如果不在View中，則需要加上 I18n 類別
I18n.t("admin.event")
</code></pre>

<p>如何讓使用者切換語系</p>

<pre><code># controllers/application_controller.rb
before_action :set_locale

def set_locale
  # 可以將 ["en", "zh-TW"] 設定為 VALID_LANG 放到 config/environment.rb 中
  if params[:locale] &amp;&amp; I18n.available_locales.include?( params[:locale].to_sym )
    session[:locale] = params[:locale]
  end

  I18n.locale = session[:locale] || I18n.default_locale
end
</code></pre>

<pre><code># views/..
&lt;%= link_to "中文版", :controller =&gt; controller_name,
:action =&gt; action_name, :locale =&gt; "zh-TW" %&gt;
&lt;%= link_to "English", :controller =&gt; controller_name,
:action =&gt; action_name, :locale =&gt; "en" %&gt;
</code></pre>

<h2>時區 Timezone</h2>

<p>設定app 使用的時區，設定完成需重啟服務生效</p>

<pre><code># config/application.rb
config.time_zone = "Taipei"
</code></pre>

<h2>References</h2>

<ul>
<li><a href="https://ihower.tw/rails4/i18n.html">ihower-i18n</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Module - Calculations]]></title>
    <link href="http://rt-tong.com/blog/2016/08/25/activerecord-module-calculations/"/>
    <updated>2016-08-25T10:44:12+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/25/activerecord-module-calculations</id>
    <content type="html"><![CDATA[<blockquote><p>擷取常用的methods</p></blockquote>

<!-- more -->


<h2>Pluck</h2>

<p>使用<a href="http://apidock.com/rails/ActiveRecord/Calculations/pluck">pluck</a> 查詢想要的欄位資料，值已陣列回傳，值的類別同欄位型別(如果可以)</p>

<p>也可以傳入sql 指令，例如：Distinct</p>

<pre><code>Person.all.map(&amp;:name)

# equal to

Person.pluck(:name)
# SELECT people.name FROM people
# =&gt; ["A", "B", "C"]

Person.pluck(:id, :name)
# SELECT people.id, people.name FROM people
# =&gt; [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]

Person.pluck('DISTINCT role')
# SELECT DISTINCT role FROM people
# =&gt; ['admin', 'member', 'guest']

Person.where(age: 21).limit(5).pluck(:id)
# SELECT people.id FROM people WHERE people.age = 21 LIMIT 5
# =&gt; [2, 3]

Person.pluck('DATEDIFF(updated_at, created_at)')
# SELECT DATEDIFF(updated_at, created_at) FROM people
# =&gt; ['0', '27761', '173']
</code></pre>

<blockquote><p>與select 的差別在於，select 會取出model object，而pluck 只取出module value</p></blockquote>

<p>使用Benchmark 測試一下兩者的執行時間</p>

<pre><code>puts Benchmark.measure { User.select(:id).to_a }
# User Load (0.6ms)  SELECT "users"."id" FROM "users"
# 0.010000   0.000000   0.010000 (  0.014949)

puts Benchmark.measure { User.pluck(:id) }
# (0.8ms)  SELECT "users"."id" FROM "users"
# 0.000000   0.000000   0.000000 (  0.004965)
</code></pre>

<p>相較之下，pluck 的執行速度會比select 快</p>

<p>是因為select 還要把結果轉model object，但是pluck 單純把結果轉array</p>

<p>結論：如果只要單純取欄位的資料，請選擇<code>pluck</code></p>

<h2>Count</h2>

<p><a href="http://apidock.com/rails/v4.2.1/ActiveRecord/Calculations/count">Count</a> the records</p>

<pre><code>Person.count
# =&gt; the total count of all people

Person.count(:age)
# =&gt; returns the total count of all people whose age is present in database

Person.count(:all)
# =&gt; performs a COUNT(*) (:all is an alias for '*')

Person.distinct.count(:age)
# =&gt; counts the number of different age values
</code></pre>

<p>使用group 會回傳Hash 值，並以key = column value, value = count amount 的方式表示</p>

<pre><code>Person.group(:city).count
# =&gt; { 'Rome' =&gt; 5, 'Paris' =&gt; 3 }
</code></pre>

<p>如果group 多個欄位，那key 就是欄位的組合</p>

<pre><code>Article.group(:status, :category).count
# =&gt;  {["draft", "business"]=&gt;10, ["draft", "technology"]=&gt;4,
       ["published", "business"]=&gt;0, ["published", "technology"]=&gt;2}
</code></pre>

<p>使用select 則是回傳select 後的筆數</p>

<blockquote><p>並非所有正確的select 都會產生正確的count。會根據database 而有所不同。</p></blockquote>

<pre><code>Person.select(:age).count
# =&gt; counts the number of different age values
</code></pre>

<h2>Maximum/Minimum</h2>

<p><a href="http://apidock.com/rails/v4.2.1/ActiveRecord/Calculations/maximum">Maximum</a> 找出查詢欄位的最大值，查詢結果會根據欄位型別產生對應的物件類別，無資料則回傳<code>nil</code></p>

<pre><code>Person.maximum(:age) # =&gt; 93
</code></pre>

<p>同上，但是<a href="http://apidock.com/rails/v4.2.1/ActiveRecord/Calculations/minimum">Minimum</a>查詢最小值</p>

<pre><code>Person.minimum(:age) # =&gt; 7
</code></pre>

<h2>Sum/Average</h2>

<p><a href="http://apidock.com/rails/ActiveRecord/Calculations/sum">Sum</a> 計算查詢欄位的總和，無資料則回傳0</p>

<pre><code>Person.sum(:age) # =&gt; 4562
</code></pre>

<p><a href="http://apidock.com/rails/ActiveRecord/Calculations/average">Average</a> 計算欄位的平均值，無資料則回傳<code>nil</code></p>

<pre><code>Person.average(:age) # =&gt; 35.8
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://apidock.com/rails/ActiveRecord/Calculations/">ActiveRecord-Calculations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Nil? | Empty? | Blank?]]></title>
    <link href="http://rt-tong.com/blog/2016/08/24/ruby-nil_empty_blank/"/>
    <updated>2016-08-24T14:09:59+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/24/ruby-nil_empty_blank</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>nil?</h2>

<p>可使用在任何的<code>object</code>，檢查是否為<code>nil</code>，如果是<code>nil</code>會回傳<code>true</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = &ldquo;str&rdquo;
</span><span class='line'>b = nil&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;a.nil? # false
</span><span class='line'>b.nil? # true</span></code></pre></td></tr></table></div></figure></p>

<h2>empty?</h2>

<p>可使用在<code>String</code>、<code>Array</code>、<code>Hash</code>，如果為長度為0 會回傳<code>true</code></p>

<p>如果object 是<code>nil</code>，使用empty? 會出現<code>NoMethodError</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = &ldquo;&rdquo;
</span><span class='line'>b = []
</span><span class='line'>c = {}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;a.empty? # true
</span><span class='line'>b.empty? # true
</span><span class='line'>c.empty? # true</span></code></pre></td></tr></table></div></figure></p>

<h2>blank?</h2>

<p>這實作在Rails ，是empty? 的強化版，不受限在<code>String</code>、<code>Array</code>、<code>Hash</code>
<code>
nil.blank?    # true
false.blank?  # true
[].blank?     # true
{}.blank?     # true
"".blank?     # true
5.blank?      # false
0.blank?      # false
</code></p>

<p><strong>But</strong> 如果空白字串，會認定為<code>true</code>
<code>
"  ".blank? # false
"  ".empty? # true
</code></p>

<p>注意：如果陣列的值都是空字串或是nil，會回傳true
<code>
['',nil].blank? # ture
</code></p>

<p>可以使用.all? + blank? 的方式來檢查陣列的值
<code>
['',nil].all? &amp;:blank # true
</code></p>

<h2>present?</h2>

<p>這也是實作在Rails 但跟<code>blank?</code> 的判斷完全顛倒
<code>
nil.present?    # false
false.present?  # false
[].present?     # false
{}.present?     # false
"".present?     # false
5.present?      # true
0.present?      # true
</code></p>

<h2>總結</h2>

<p>剛剛測試的結果，已經有整理成一份表格，可以透過表格查看要使用什麼方式來檢查boolean 值~</p>

<p><img src="/images/posts/2016082401.jpg" alt="nil_empty_blank_present" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Module - Enum]]></title>
    <link href="http://rt-tong.com/blog/2016/08/22/activerecord-module-enum/"/>
    <updated>2016-08-22T17:17:21+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/22/activerecord-module-enum</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>ActiveRecord::Enum</h2>

<h3>目的</h3>

<p>宣告文字用來說明欄位中數字的意義，以下介紹兩種方式，也可順便解釋使用enum 的好處</p>

<p>假設Conversation 有個status 的欄位，建立常數，使用Hash 表示 0、1，分別代表active、archived</p>

<h3>w/o Enum</h3>

<pre><code>module Conversation
  STATUS = { 0 =&gt; "active", 1 =&gt; "archived" }
end

conversation = Conversation.last
STATUS[conversation.status] # active or archived
</code></pre>

<h3>w/ Enum</h3>

<blockquote><p>官方建議：欄位必須建立預設值</p></blockquote>

<pre><code>class Conversation &lt; ActiveRecord::Base
  enum status: {
    active: 0,
    archived: 1
  }
end
</code></pre>

<p>查看總共有哪些狀態(名字加複數)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Conversation.statuses&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;{ &ldquo;active&rdquo;=&gt;0, &ldquo;archived&rdquo;=&gt;1 }&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>查看目前狀態
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;conversation = Conversation.last
</span><span class='line'>conversatino.active!
</span><span class='line'>conversation.status # active</span></code></pre></td></tr></table></div></figure></p>

<p>變更欄位狀態
<code>
conversation = Conversation.last
conversatino.archived!
conversatino.archived?  #true
</code></p>

<p>查詢是否為此狀態
<code>
conversation = Conversation.last
conversatino.active!
conversatino.active?    #true
conversatino.archived?  #false
</code></p>

<p>當作where 查詢條件
<code>
Conversation.where(status: [:active, :archived])
</code></p>

<p>加入<em>prefix
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Conversation &lt; ActiveRecord::Base
</span><span class='line'>  enum comments_status: [:active, :inactive], &lt;/em&gt;prefix: :comments
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;conversation.comments_inactive!
</span><span class='line'>conversation.comments_active? # =&gt; false</span></code></pre></td></tr></table></div></figure></p>

<p>加入<em>suffix
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Conversation &lt; ActiveRecord::Base
</span><span class='line'>  enum status: [:active, :archived], &lt;/em&gt;suffix: true
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;conversation.active_status!
</span><span class='line'>conversation.archived_status? # =&gt; false</span></code></pre></td></tr></table></div></figure></p>

<p>轉成陣列 (options_for_select)
<code>
Conversation.statuses.invert.to_a # [[0, "active"], [1, "archived"]]
</code></p>

<h3>優點</h3>

<ul>
<li>database 仍儲存數字代碼，查詢速度較快</li>
<li>程式部分仍可以使用文字方式開發，提高閱讀性</li>
</ul>


<h3>References</h3>

<ul>
<li><a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html">ActiveRecord::Enum</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
