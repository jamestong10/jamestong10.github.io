<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | JT's Blog]]></title>
  <link href="https://jamestong10.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="https://jamestong10.github.io/"/>
  <updated>2017-06-13T21:54:21+08:00</updated>
  <id>https://jamestong10.github.io/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Partials]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/05/rails-partial/"/>
    <updated>2017-06-05T16:41:07+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/05/rails-partial</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>用來簡化 View 複雜的程式邏輯</p>

<p>把細節的部份拆出去，更容易理解 View 的全局</p>

<p>檔名需要<strong>以底線開頭</strong>，但呼叫時不需加上底線</p></blockquote>

<p>Action View Partials 用來 render sub templates</p>

<h2>Syntax</h2>

<pre><code class="ruby">&lt;%= render partial: sub_template_name, *options %&gt;
</code></pre>

<ul>
<li><code>render</code> is a shorthand for <code>render partial:</code></li>
<li>單使用 <code>render</code>, Rails 就不會處理後續的 options</li>
<li>如果要使用 options 就要改成 <code>render partial:</code></li>
</ul>


<h2>Default Case</h2>

<p>使用 <code>render</code> 產生 partial</p>

<p>雖然有規定 <code>render</code> 不會處理 options，但還有一些特殊案例</p>

<pre><code class="ruby">&lt;%= render partial: "account" %&gt;

# equivalent to
&lt;%= render "account" %&gt;
</code></pre>

<p>sub template name equivalent to variable name</p>

<pre><code class="ruby">&lt;%= render partial: "accounts/account", locals: { account: @account} %&gt;

# equivalent to
&lt;%= render @account %&gt;
</code></pre>

<p>只有單一個 locals</p>

<pre><code class="ruby">&lt;%= render partial: "account", locals: { account: @buyer } %&gt;

# equivalent to
&lt;%= render "account", account: @buyer %&gt;
</code></pre>

<p>都同名可簡化 collection</p>

<pre><code class="ruby">&lt;%= render partial: "posts/post", collection: @posts %&gt;

# equivalent to
&lt;%= render @posts %&gt;
</code></pre>

<h2>Options</h2>

<h3>locals</h3>

<p>傳遞資料</p>

<pre><code class="ruby">&lt;%= render partial: "user", locals: { user: @user, order: @order } %&gt;
</code></pre>

<h3>collection</h3>

<p>使用 for-each render 逐一產生 partial</p>

<pre><code class="ruby"># index.html.erb
&lt;%= render partial: "product", collection: @products %&gt;

# _product.html.erb
Product Name: &lt;%= product.name %&gt;

# short-hand
&lt;%= @products %&gt;

# if collection is empty, render will return nil,
# should simple to provide alternative message.
&lt;%= render(@products) || "Empty Products" %&gt;
</code></pre>

<h3>layout</h3>

<p>指定 render layout</p>

<pre><code class="ruby">&lt;%= render partial: "user", locals: { user: @user, order: @order }, layout: 'editor' %&gt;
</code></pre>

<h2>進階 Layout - layout + yield</h2>

<h3>動機</h3>

<p>把共用的 view 寫在 layout ，然後客製（變動）的內容寫在partial</p>

<h3>開發</h3>

<p>1.寫一個 layout 專用的 partial view，並把需要客製的部份加上 <code>yield</code></p>

<pre><code class="ruby">&lt;%# app/views/users/_editor.html.haml %&gt;
#editor
  %h1 always the same headline
  %h3 always the same description
  = yield
</code></pre>

<p>2.寫客製的 partial view
<code>ruby
&lt;%# app/views/users/_user.html.haml %&gt;
= "Deadline: #{user.deadline}"
= "Name: #{user.name}"
</code></p>

<p>3.render 設定 partial and layout，就可以把 partial 的內容套在 layout 的 yield 區塊內</p>

<pre><code>&lt;%# app/views/users/index.html.haml %&gt;
&lt;%= render partial: "user", layout: "editor", locals: { user: @user } %&gt;
</code></pre>

<p>如果不用 <code>yield</code>，可以使用 block 表現
<code>ruby
&lt;%= render layout: "editor", locals: { user: @user } do %&gt;
  &lt;%= do_something %&gt;
&lt;% end %&gt;
</code></p>

<p>實際應用：把預覽圖片跟上傳圖片的功能提取出來，並且可個別設定內部要呈現的內容，例如：產品說明、大頭照說明等</p>

<h2>Helper + Partial</h2>

<p>這次要把partial 放進 helper 內</p>

<p>1.一樣建立 partial，把要執行客製的部分使用 <code>capture(&amp;block)</code> 表示
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span><span class="c1"># app/views/users/_editor.html.haml %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">editor</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  %h1 always the same headline</span>
</span><span class='line'><span class="sr">  %h3 always the same description</span>
</span><span class='line'><span class="sr">  = capture(&amp;amp;block)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>2.在helper 寫method 呼叫 <code>render partial:</code></p>

<pre><code class="ruby"># application_helper.rb
def modal_for(heading, &amp;block)
  render(
    partial: 'shared/modal',
    locals: { heading: heading, block: block }
  )
end
</code></pre>

<p>3.在view 使用helper
<code>ruby
&lt;%= modal_for('My Title') do |t| %&gt;
  # print dynamic things here
&lt;% end %&gt;
</code></p>

<p>實際應用：把預覽圖片跟上傳圖片的功能提取出來，並且可個別設定內部要呈現的內容，例如：產品說明、大頭照說明等</p>

<h2>References</h2>

<ul>
<li><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials">Rails Guide - using partials</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActionView/PartialRenderer.html">Rails Classes - Action View Partials</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Delegate]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/05/rails-delegate/"/>
    <updated>2017-06-05T15:34:16+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/05/rails-delegate</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>屬於 ActiveSupport Delegate method</p>

<p>主要運用在 activerecord associations</p></blockquote>

<h2>Spec</h2>

<pre><code class="ruby">delegate(*methods) public
</code></pre>

<h3>Options</h3>

<ul>
<li><code>:to</code> 指定目標物件</li>
<li><code>:prefix</code> 設為true 就是以 :to 的物件名稱當作前綴字，或是自行設定前綴字</li>
<li><code>:allow_nil</code> 設為 true 不會產生 NoMethodError Exception，預設為 false</li>
</ul>


<h2>Description</h2>

<p>Provides a <a href="https://apidock.com/rails/Module/delegate">delegate</a> class method to easily expose contained objects’ public methods as your own.</p>

<p>The target method must be public, otherwise it will raise NoMethodError.</p>

<h2>Delegation Design Pattern</h2>

<p>Delegation 設計模式是讓物件曝露一些性質，但這些性質其實是取用與當前實例相關連的其它實例的性質而來的</p>

<h2>Explanation of Rails Delegate</h2>

<p>根據以下範例瞭解 Rails Delegate 運作方式。建議可以查看 <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/module/delegation.rb">delegation.rb</a> 瞭解實作方式</p>

<pre><code class="ruby">class Post &lt; ApplicationRecord
  belongs_to :user
end

class User &lt; ApplicationRecord
  has_many :posts
end
</code></pre>

<p>根據以上的關聯，要如何設計呼叫 <code>@post.name</code> 可直接取得 <code>@post.user.name</code> 又不會出現 NoMethodError 呢？</p>

<p>1.自行寫 <code>#name</code> 裡面在使用 <code>#try</code> 取 user.name</p>

<pre><code class="ruby">class Post &lt; ApplicationRecord
  belongs_to :user

  def name
    user.try(:name)
  end
end
</code></pre>

<p>2.以 <code>#delegate</code> 表示</p>

<pre><code class="ruby">class Post &lt; ApplicationRecord
  belongs_to :user
  delegate :name, to: :user, allow_nil: true
end
</code></pre>

<h2>Practice</h2>

<p>一般在寫 Rails 會直覺使用 associations 取得資料</p>

<pre><code class="ruby"># models
class Invoice &lt; ApplicationRecord
 belongs_to :user
end

# views
&lt;%= @invoice.user.name %&gt;
&lt;%= @invoice.user.address %&gt;
&lt;%= @invoice.user.cellphone %&gt;
</code></pre>

<p>若比較嚴謹來看，這樣是違反 <a href="https://jamestong10.github.io/blog/2017/05/15/object-orientend-design-priciples/">Lask Knowledge Priciple</a></p>

<p>而且 Views 看起來也不漂亮</p>

<p>這時可透過 Rails Delegate 優化</p>

<pre><code class="ruby"># models
class Invoice &lt; ApplicationRecord
 belongs_to :user
 delegate :name, :address, :cellphone,
 to: :user,
 prefix: true,
 allow_nil: true
end

# views
&lt;%= @invoice.user_name %&gt;
&lt;%= @invoice.user_address %&gt;
&lt;%= @invoice.user_cellphone %&gt;
</code></pre>

<p>這樣看起來是不是清爽多了~</p>

<h2>Others</h2>

<p>參考 <a href="https://jamestong10.github.io/blog/2017/05/10/ruby-forwardable/">Ruby Forwardable</a></p>

<h2>References</h2>

<ul>
<li><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/module/delegation.rb">delegation.rb</a></li>
<li><a href="https://apidock.com/rails/Module/delegate">Rails doc#delegate</a></li>
<li><a href="https://simonecarletti.com/blog/2009/12/inside-ruby-on-rails-delegate/">Understanding Ruby and Rails: Delegate</a></li>
<li><a href="http://sharefun.logdown.com/posts/737036-understanding-rails-delegate">理解Rails delegate</a></li>
<li><a href="http://waynechu.logdown.com/posts/206252-rails-delegate">Rails Delegate</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tap / Fetch / Dig / Try]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/01/ruby-tap-fetch-dig-try/"/>
    <updated>2017-06-01T14:44:42+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/01/ruby-tap-fetch-dig-try</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Tap</h2>

<p>從 <a href="https://ruby-doc.org/core-2.4.1/Object.html#method-i-tap">source code</a> 可以看出最後會傳回 self</p>

<p>以下分成兩個用途，分別介紹如何運用此特性</p>

<h3>用途一：調測</h3>

<p>在使用 chain 時，要查看某個過程的內容，可以使用 <code>#tap</code> 印出內容，卻又不會影響執行</p>

<pre><code class="ruby">(1..10)                .tap {|x| puts "original: #{x.inspect}"}
  .to_a                .tap {|x| puts "array: #{x.inspect}"}
  .select {|x| x%2==0} .tap {|x| puts "evens: #{x.inspect}"}
  .map { |x| x*x }     .tap {|x| puts "squares: #{x.inspect}"}
</code></pre>

<h3>用途二：簡化代碼</h3>

<p>可用在建立一個方法，要傳回一個 String/Array/Hash 的結果</p>

<pre><code class="ruby">[].tap {|i| i &lt;&lt; "abc"}
''.tap {|i| i &lt;&lt; do_some_thing }
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://ruby-doc.org/core-2.4.1/Object.html#method-i-tap">ruby doc - tap</a></li>
<li><a href="https://ruby-china.org/topics/5348">Rails 技巧之 tap &amp; try</a></li>
</ul>


<h2>Fetch</h2>

<blockquote><p>取不到值時，會以預設值取代，但沒設定預設值會出現 Error</p></blockquote>

<p>Hash / Array 皆有實作 <code>#fetch</code></p>

<h3>Array#fetch</h3>

<pre><code class="ruby">a = [ 11, 22, 33, 44 ]
a.fetch(1)               #=&gt; 22
a.fetch(-1)              #=&gt; 44
a.fetch(4, 'cat')        #=&gt; "cat"
a.fetch(4) { |i| i*i }   #=&gt; 16
a.fetch(5)               #=&gt; IndexError
</code></pre>

<h3>Hash#fetch</h3>

<pre><code class="ruby">h = { "a" =&gt; 100, "b" =&gt; 200 }
h.fetch("a")                            #=&gt; 100
h.fetch("z", "go fish")                 #=&gt; "go fish"
h.fetch("z") { |el| "go fish, #{el}"}   #=&gt; "go fish, z"
h.fetch("z")                            #=&gt; KeyError
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://ruby-doc.org/core-1.9.3/Array.html#method-i-fetch">ruby doc - array#fetch</a></li>
<li><a href="https://ruby-doc.org/core-2.2.0/Hash.html#method-i-fetch">ruby doc - hash#fetch</a></li>
</ul>


<h2>Dig</h2>

<blockquote><p>適用在多層</p>

<p>跟 #try 一樣，如果其中一層為 nil，會回傳 nil 而不會出現 Error</p></blockquote>

<p>Ruby 2.3.0</p>

<p>Hash / Array 皆有實作 <code>#dig</code></p>

<h3>Array#dig</h3>

<pre><code class="ruby">a = [[1, [2, 3]]]

a.dig(0, 1, 1)                    #=&gt; 3
a.dig(0, 0, 0)                    #=&gt; nil
</code></pre>

<h3>Hash#dig</h3>

<p>在 rails 取 params 時，會使用以下方式取值</p>

<pre><code class="ruby">name = params[:company][:owner][:name]
</code></pre>

<p>要避免遇到 nil，可改寫成</p>

<pre><code class="ruby">name = params[:company][:owner][:name] if params[:company] &amp;&amp; params[:company][:owner] &amp;&amp; params[:company][:owner][:name]
</code></pre>

<p>使用 #dig 處理</p>

<pre><code class="ruby">name = params.dig(:company, :owner, :name)
</code></pre>

<p>同樣 case 用 <code>#try</code> 的 chain，看來使用 <code>#dig</code> 比較適合</p>

<pre><code class="ruby">params.try(:[], :company).try(:[], :owner).try(:[], :name)
</code></pre>

<h3>References</h3>

<ul>
<li><a href="http://ruby-doc.org/core-2.3.0_preview1/Array.html#method-i-dig">ruby doc - array#dig</a></li>
<li><a href="http://ruby-doc.org/core-2.3.0_preview1/Hash.html#method-i-dig">ruby doc - hash#dig</a></li>
</ul>


<h2>try</h2>

<p>同場加映，<code>#try</code> 是屬於 Rails Object method</p>

<p>等同 <code>Object#send</code>，但 object 為 nil 時，呼叫 method <strong>會出現</strong> NoMethodError exception</p>

<p>但使用 <code>#try</code>，object 為 nil 時，會回傳 nil ，而<strong>不會出現</strong> NoMethodError exception</p>

<p>因此是一個相當實用的功能</p>

<p>最常見的例子像是我們想判斷某些動作只有管理員可以進行操作，因此我們通常會這樣寫</p>

<pre><code class="ruby">if current_user.is_admin?
    # do something
end
</code></pre>

<p>但總會遇到 current_user 有 nil 的時候，這時就適合用 <code>#try</code> 確認 current_user 是否為 nil，再去呼叫 <code>#is_admin?</code></p>

<pre><code class="ruby">if current_user.try(:is_admin?)
    # do something
end
</code></pre>

<p><code>#try</code> 也可以實現 block，如果 instance object 不為 nil</p>

<pre><code class="ruby">@person.try { |p| "#{p.first_name}" "#{p.last_name}" }
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://apidock.com/rails/v4.2.7/Object/try">apidock - try</a></li>
<li><a href="https://ruby-china.org/topics/5348">Rails 技巧之 tap &amp; try</a></li>
<li><a href="https://ihower.tw/rails/activesupport.html#try">ihower active support - try</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec]]></title>
    <link href="https://jamestong10.github.io/blog/2017/05/23/rspec/"/>
    <updated>2017-05-23T11:32:44+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/05/23/rspec</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>介紹</h2>

<ul>
<li>用來測試 Ruby / Rails 的測試工具</li>
<li>程式開發過程，可以確保程式的正確性，也可以讓開發人員有效的重構</li>
<li>當成一種程式文件</li>
</ul>


<h2>慣例</h2>

<ol>
<li>一個 <em>.rb 要搭配同名的 </em>_spec.rb</li>
<li><code>#method</code> 表示 instance method, <code>.method</code> 表示class method</li>
<li>在 Rails 寫 RSpec 建議順序 Model > Controller > View</li>
</ol>


<h2>安裝</h2>

<pre><code class="ruby"># Gemfile
group :development, :test do
  gem 'rspec-rails'
end

$ rails generate rspec:install
</code></pre>

<p>設定取消自動產生 rspec</p>

<pre><code># config/application.rb

class Application &lt; Rails::Application
  config.generators do |g|
    g.controller_specs false
    g.model_specs false
    g.view_specs false
    g.helper_specs false
    g.routing_specs false
    g.request_specs false
  end
end
</code></pre>

<h2>測試指令</h2>

<ul>
<li><code>rspec</code> 全部測試</li>
<li><code>rspec spec/controllers</code> 整個資料夾測試</li>
<li><code>rspec filename_spec.rb</code> 單一檔案測試</li>
<li><code>rspec filename_spec.rb:linenumber</code> 執行某行之後的測試</li>
</ul>


<h2>輸出</h2>

<p>預設不產出文件</p>

<ul>
<li>產生document 並輸出 specdoc  文件
<code>
$ rspec spec --format documentation --out rspec_result.txt
$ rspec spec -fd -o rspec_result.txt
</code></li>
<li>輸出 html 文件
<code>
$ rspec spec --format html --out rspec_result.html
$ rspec spec -fh -o rspec_result.html
</code></li>
</ul>


<h2>Describe / Context / it</h2>

<p>RSpec 的主要區塊，所有的測試都寫在 describe 裡面，裡面則包含多個 context、it 測試</p>

<p>descirbe 超過 40 個字，就需要使用 context、it 分段，讓你的測試更明確、有條理，保持可讀性</p>

<h2>Before &amp; After</h2>

<p>同unit test 的setup 與teardown</p>

<ul>
<li>before(:each) 每段it之前執行</li>
<li>before(:all)  整段describe前只執行一次</li>
<li>after(:each)  每段it之後執行</li>
<li>after(:all)   整段describe後只執行一次</li>
</ul>


<h2>let &amp; let!</h2>

<ul>
<li>let 用到的時候再會被執行</li>
<li>let! 每個測試前都會執行</li>
</ul>


<p>建議用 let 代替 before 來建立 instance variable</p>

<p>因為 let 有 lazy load 特性，只在測項第一次用到該 variable 時被執行，並且會 cache 直到該測項結束</p>

<p>這個技巧在產生 database 內容以測試 query 和 scope 時十分好用</p>

<h2>Stubs</h2>

<p>Stub: For replacing a method with code that returns a specified result.</p>

<ul>
<li>用stub 假造 method，讓它忽略這個 method，或是指定回傳東西，可以避免在測試時，測試不必要的東西。</li>
<li>專注於要測試的東西，如果 method 有呼叫其他 method 就可以 stub 掉</li>
<li>製造假物件，指定這個假物件能回應哪些訊息，還有對應的回傳值，讓要測試的主角，在執行過程中一些地方，能獲得一致的結果</li>
<li>要測試的 model</li>
</ul>


<h2>Mocks</h2>

<p>Mock: A stub with an expectations that the method gets called.</p>

<ul>
<li>假造 method，不只忽略這個 method ，並且期望被呼叫到</li>
<li>「模擬」與一個「協作者」的互動，設立一個「會收到指定訊息」的期望，去驗證互動是否真的有發生。</li>
<li>簡單來說 mock 就是 stub + expectation , 說它是 stub 是因為它也可以像 stub 一樣偽造方法, 阻斷對原來方法的調用, expectation 是說它不僅偽造了這個方法,它還期望你(必須)調用這個方法,如果沒有被調用到,這個 test 就 fail 了</li>
<li>一樣製造假物件，但是現在我們改對這個假物件斷言，在主角的執行過程中，應該要收到什麼訊息、收到的訊息應該夾帶什麼參數、訊息收到的次數…等等，但是會有程式碼的流程些微不自然的問題（準備、斷言、（準備）、執行）</li>
</ul>


<p>使用 mock objects，在 RSpec 裡面叫做 double（替身），來取代「外部邏輯」資料</p>

<pre><code># 讓 Post.save 失敗
allow_any_instance_of(Post).to receive(:save).and_return(false)

# 讓 Post.update 失敗
allow_any_instance_of(Post).to receive(:update).and_return(false)
</code></pre>

<h2>Controller Specs</h2>

<p>Examples
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rails_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe TeamsController, :type =&gt; :controller do</span>
</span><span class='line'><span class="sr">  describe &amp;ldquo;GET index&amp;rdquo; do</span>
</span><span class='line'><span class="sr">    it &amp;ldquo;assigns @teams&amp;rdquo; do</span>
</span><span class='line'><span class="sr">      team = Team.create</span>
</span><span class='line'><span class="sr">      get :index</span>
</span><span class='line'><span class="sr">      expect(assigns(:teams)).to eq([team])</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">it</span> <span class="s2">&quot;renders the index template&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Matchers</p>

<ul>
<li><p>render_template
<code>
expect(response).to render_template(:new)
</code></p></li>
<li><p>redirect_to
<code>
expect(response).to redirect_to(location)
</code></p></li>
<li><p>have_http_status
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:created</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;success 就有四種寫法 XD&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:success</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;page not found&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>be_a_new
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:widget</span><span class="p">)</span> <span class="err">表示</span> <span class="n">action</span> <span class="err">要回傳的</span> <span class="vi">@widget</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;be_a_new 只是否等同 Widget.new&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:widget</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a_new</span><span class="p">(</span><span class="no">Widget</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<h2>Model Specs</h2>

<p>Examples</p>

<p>使用 reload 重新載入資料</p>

<pre><code class="ruby">require "rails_helper"

describe Post, :type =&gt; :model do
  context "with 2 or more comments" do
    it "orders them in reverse chronologically" do
      post = Post.create!
      comment1 = post.comments.create!(:body =&gt; "first comment")
      comment2 = post.comments.create!(:body =&gt; "second comment")
      expect(post.reload.comments).to eq([comment2, comment1])
    end
  end
end
</code></pre>

<p>取消 transactions</p>

<pre><code class="ruby">require "rails_helper"

RSpec.configure do |c|
  c.use_transactional_examples = false
  c.order = "defined"
end

describe Widget, :type =&gt; :model do
  it "has none to begin with" do
    expect(Widget.count).to eq 0
  end

  it "has one after adding one" do
    Widget.create
    expect(Widget.count).to eq 1
  end

  # 關閉 transactions，剛剛建立的 Widget 就不會消失
  it "has one after one was created in a previous example" do
    expect(Widget.count).to eq 1
  end

  after(:all) { Widget.destroy_all }
end
</code></pre>

<h2>Routing Specs</h2>

<pre><code class="ruby">describe "posts", :type =&gt; :routing do

  expect(:get =&gt; "/events").to route_to("events#index")
  expect(:get =&gt; "/widgets/1/edit").not_to be_routable

  expect(:get =&gt; "/posts/1").to route_to(
        :controller =&gt; "posts",
        :action =&gt; "show",
        :id =&gt; "1"
        )
end
</code></pre>

<h2>:type => ??</h2>

<p>設定 type 為 controller / model / routing 是 rspec metadata，可以讓 rspec 知道目前的 type</p>

<p>當然也可以在 rails_helper 加入設定，這樣就不需要再每個 spec 檔都加入 type ，只要把檔案放在對應的資料夾，就可以代表該檔案的type</p>

<p>e.g. spec/models -> 認定為 model</p>

<pre><code># rails_helper
config.infer_spec_type_from_file_location!
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://www.relishapp.com/rspec/rspec-rails/v/3-5/docs">RSpec Rails 3.5</a></li>
<li><a href="http://betterspecs.org/zh_tw/">Better Specs</a></li>
<li><a href="http://motion-express.com/trainings/rspec-rails-1">特快車-RSpec-Rails</a></li>
<li><a href="http://mgleon08.github.io/blog/2016/01/29/rspec-plus-factory-girl/">用 Rspec + Factory Girl + CircleCi 寫測試</a></li>
<li><a href="https://github.com/festime/stubs-mocks-spies-in-rspec">了解 Stubs, Mocks, and Spies</a></li>
<li><a href="https://xdite.gitbooks.io/rspec-101/content/">RSpec on Rails 101</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Module::Concerning and ActiveSupport::Concern]]></title>
    <link href="https://jamestong10.github.io/blog/2017/05/18/concerns/"/>
    <updated>2017-05-18T15:45:21+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/05/18/concerns</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Module#concerning</h2>

<p>Rails 4.1 新增的功能，如果module 內容不多，但又非得新增一個module，或許可以考慮用concerning 的方式</p>

<p>一般使用mixin 使用方式</p>

<pre><code class="ruby"># app/models/article.rb
class Article &lt; ActiveRecord::Base
  include Tagging
end

# app/models/concerns/tagging.rb
module Tagging
 # ...
end
</code></pre>

<p>使用concerning</p>

<pre><code class="ruby">class Article &lt; ActiveRecord::Base
  # 基本：建立一般的 instance method
  concerning :Tagging do
    def news do
      # ...
    end
  end
  # 進階1:加入included (include 時執行)
  concerning :Scope do
    included di
      scope :published, -&gt; { where(state: 'published') }
    end
  end
  # 進階2：加入class method
  concerning :Search do
    class_methods do
      def published do
        # ...
      end
    end
  end
end
</code></pre>

<h3>References</h3>

<ul>
<li><a href="http://api.rubyonrails.org/v4.1/classes/Module/Concerning.html">Module#Concerning</a></li>
</ul>


<h2>ActiveSupport::Concern</h2>

<ul>
<li>將共用的邏輯寫到module 並用mixin 的方式，如此可以集中管理</li>
<li>讓module 的相依性降低（低耦合），方便管理</li>
<li>命名以able结尾</li>
</ul>


<p>一般module 要mixin 到class  要使用included</p>

<pre><code class="ruby">module M
  def self.included(base)
    base.extend ClassMethods
    base.class_eval do
      scope :disabled, -&gt; { where(disabled: true)}
    end
  end

  module ClassMethods
    # ...
  end
end
</code></pre>

<p>如果使用ActiveSupport::Concern module 就可以改寫</p>

<pre><code class="ruby">require 'active_support/concern'

module M
  extend ActiveSupport::Concern

  # 在include 的時執行
  # 加入 scope 或 attr_accessor
  included do
    scope :disabled, -&gt; { where(disabled: true)}
  end

  # 定義class methods
  class_methods do
    # ...
  end

  # 除了上面兩個區塊外，都屬於 instance methods
end
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://ruby-china.org/topics/19812">ActiveSupport::Concern 小结</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a></li>
<li><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/concern.rb">concern.rb</a></li>
<li><a href="http://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">put-chubby-models-on-a-diet-with-concerns</a></li>
<li><a href="http://mgleon08.github.io/blog/2016/03/26/concern/">concern</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
