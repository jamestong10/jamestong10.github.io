<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | JT's Blog]]></title>
  <link href="https://jamestong10.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="https://jamestong10.github.io/"/>
  <updated>2019-08-06T21:56:25+08:00</updated>
  <id>https://jamestong10.github.io/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Object Inspect / To_s]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/17/ruby-to-s-inspect/"/>
    <updated>2017-06-17T17:08:26+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/17/ruby-to-s-inspect</id>
    <content type="html"><![CDATA[<!-- more -->


<p>記錄 Object <code>#to_s</code> 與 <code>#inspect</code> 的比較</p>

<h2>Ruby Doc</h2>

<p><a href="https://ruby-doc.org/core-2.4.1/Object.html#method-i-inspect">inspect</a>: 預設回傳物件類別名稱、object_id和所有變數值</p>

<p><a href="https://ruby-doc.org/core-2.4.1/Object.html#method-i-to_s">to_s</a>: 預設回傳物件類別名稱、object_id</p>

<h2>實驗</h2>

<p>建立 class Item</p>

<pre><code class="ruby">class Item
 def initialize(name)
  @name=name
 end
end

item = Item.new(100)
</code></pre>

<p>使用 <code>#to_s</code> 與 <code>#inspect</code></p>

<pre><code class="ruby">puts item.inspect # &lt;Item:0x007fc74b01bf20 @name=100&gt;
puts item.to_s    # &lt;Item:0x007fc74b01bf20&gt;
</code></pre>

<p>如果用 <code>p</code>, <code>print</code>, <code>puts</code> 印出 object 結果是什麼呢？</p>

<pre><code class="ruby">p     item # &lt;Item:0x007fc74b01bf20 @name=100&gt;
print item # &lt;Item:0x007fc74b01bf20&gt;
puts  item # &lt;Item:0x007fc74b01bf20&gt;
</code></pre>

<p><code>p</code> 印出 Object#inspect 並回傳值</p>

<p><code>print</code>, <code>puts</code> 印出 Object#to_s</p>

<h2>nil</h2>

<p>注意 nil 是另外一種結果</p>

<pre><code class="ruby">nil.to_s    # =&gt; ""
nil.inspect # =&gt; "nil"
</code></pre>

<h2>使用</h2>

<ul>
<li>瞭解整個物件的內容，包含 instance variables 就使用 <code>#inspect</code> （debug 用？）</li>
<li>單純只要產生字串，就使用 #to_s</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec Double / Stubs / Mocks]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/16/rspec-double-stubs-mocks/"/>
    <updated>2017-06-16T10:06:25+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/16/rspec-double-stubs-mocks</id>
    <content type="html"><![CDATA[<!-- more -->


<p>原本放在 <a href="/blog/2017/05/23/rspec/">RSpec</a>，但是越寫越多，就把它獨立成一篇</p>

<h2>Double</h2>

<p>RSpec 裡面叫做 double（替身），目的是用來建立替身（假物件）</p>

<pre><code class="ruby"># 建立一個假的 User object 並設定是 admin
describe "double demo" do
  it "user is an admin" do
    user = double("User", name: 'james', is_admin: true)
    expect(user.is_admin).to be_truthy
  end
end
</code></pre>

<h3>Partial Test Doubles</h3>

<p>設定 class method return value</p>

<pre><code class="ruby">describe "partial test doubles" do
  it "partial test doubles" do

    allow(User).to receive(:find).and_return("100")

    expect(User.find).to eq("100")
  end
end
</code></pre>

<h3>Null object doubles</h3>

<p>使用 <code>as_null_object</code>，確保執行未知的 method 不會出錯誤並回傳自己</p>

<pre><code class="ruby">describe "null object doubles" do
  it "null object doubles" do

    dbl = double("Some Collaborator").as_null_object

    expect(dbl.foo.bar).to be dbl
  end
end
</code></pre>

<h3>Spies</h3>

<p>TBD</p>

<h3>Scope</h3>

<p>TBD</p>

<h2>Stubs</h2>

<blockquote><p>Stub 「不管邏輯、過程，只要建立假 method 並回傳資料或狀態」</p></blockquote>

<p>Stub 手法用在要驗證 「回傳值」 或驗證 「狀態改變時」</p>

<p>rspec 3 之後改用 <code>#allow</code> 取代 <code>#stub</code></p>

<p><img src="/images/posts/2017061601.jpg" alt="stub" />
(source: <a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs">test-doubles&mdash;fakes-mocks-and-stubs</a>)</p>

<p>Stubs 不管 <code>#list_student_names</code> 中間執行哪些動作，只管最後回傳結果</p>

<pre><code class="ruby">describe ClassRoom do
  it 'the list_student_names method should work correctly' do
    student1 = double('student')
    student2 = double('student')

    # 使用 stub 回傳假資料 (Rails 3 之前)
    #student1.stub(:name).and_return('John Smith')
    #student2.stub(:name).and_return('Jill Smith')

    # 使用 allow 取代 stub 回傳假資料 (Rails 3 之後)
    allow(student1).to receive(:name).and_return('John Smith')
    allow(student2).to receive(:name).and_return('Jill Smith')

    class_room = ClassRoom.new [student1,student2]
    expect(class_room.students_count).to eq(2)
    expect(class_room.list_student_names).to eq('John Smith,Jill Smith')
  end
end
</code></pre>

<h2>Mocks</h2>

<blockquote><p>Mock 「模擬一物件有相同的介面，測試一個 「會收到指定訊息」 的期望，去驗證互動是否真的有發生」</p></blockquote>

<p>Mock 的手法用在互動並取得預期結果</p>

<p>使用double 建立替身，產生互動過程，提供預期結果</p>

<p><img src="/images/posts/2017061602.jpg" alt="mock" />
(source: <a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs">test-doubles&mdash;fakes-mocks-and-stubs</a>)</p>

<h3>範例：</h3>

<p>實作 class ClassRoom</p>

<pre><code class="ruby">class ClassRoom
  def initialize(students)
    @students = students
  end

  def list_student_names
    update_student_count_of_classroom
    send_mail_notify_teacher
    @students.map(&amp;:name).join(',')
  end

  def students_count
    @students.count
  end
end
</code></pre>

<p>使用 double 建立假物件</p>

<pre><code class="ruby">describe ClassRoom do
  it 'the list_student_names method should work correctly' do
    student1 = double('student')
    student2 = double('student')

    class_room = ClassRoom.new [student1,student2]
    expect(class_room.students_count).to eq(2)
  end
end
</code></pre>

<h2>Mocks vs. Stubs</h2>

<blockquote><p>Behavioral testing vs State testing</p></blockquote>

<h2>補充：Types of test double</h2>

<p>The term “test double” is used to refer to a range of testing techniques, with the common theme that a substitute object is provided to the subject under test, taking the place of the objects it will communicate with in actual use.</p>

<ul>
<li>Dummy – a pure placeholder object with no behaviour (it doesn’t respond to any messages). This is used when a method requires an argument but doesn’t interact with it in a specific test.
Fake – a replacement object with real behaviour, but taking shortcuts that are helpful for testing purposes (a good example is using an in-memory database for faster testing of database-dependent code).</li>
<li>Stub – an object providing canned responses to specified messages.</li>
<li>Mock – an object that is given a specification of the messages that it must receive (or not receive) during the test if the test is to pass.</li>
<li>Spy – an object that records all messages it receives (assuming it is allowed to respond to them), allowing the messages it should have received to be asserted at the end of a test.</li>
</ul>


<h2>Reference</h2>

<ul>
<li><a href="https://relishapp.com/rspec/rspec-mocks/v/3-6/docs/basics">Rspec Mocks 3.6</a></li>
<li><a href="https://about.futurelearn.com/blog/stubs-mocks-spies-rspec/">Stubs, Mocks and Spies in RSpec</a></li>
<li><a href="https://stackoverflow.com/a/17810004">whats-the-difference-between-a-mock-stub</a></li>
<li><a href="https://stackoverflow.com/questions/7340808/whats-the-difference-between-mock-stub-and-factory-girl">What&rsquo;s the difference between mock, stub, and factory girl?</a></li>
<li><a href="https://github.com/festime/stubs-mocks-spies-in-rspec">了解 Stubs, Mocks, and Spies</a></li>
<li><a href="http://blog.xdite.net/posts/2016/06/11/rspec-advanced-concept-part-1">RSpec - 進階測試系列概念</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/mocking-with-rspec-doubles-and-expectations">Mocking with RSpec: Doubles and Expectations</a></li>
<li><a href="https://stackoverflow.com/questions/5164102/mocks-and-stubs">Mocks and Stubs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake - Ruby Make]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/13/rake-ruby-make/"/>
    <updated>2017-06-13T21:33:11+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/13/rake-ruby-make</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>說明</h2>

<p>Rake is a Make-like program implemented in Ruby.</p>

<p>Tasks and dependencies are specified in standard Ruby syntax.</p>

<h2>Install</h2>

<pre><code class="ruby">$ gem install rake
</code></pre>

<p>使用 <code>-T</code> 查詢所有rake 指令</p>

<pre><code class="ruby">$ rake -T
</code></pre>

<h2>Rakefile</h2>

<p>寫 rake 很簡單，把執行的動作都寫在 Rakefile，格式如下：</p>

<pre><code class="ruby"># Rakefile

desc "描述此 rake"
task :task_name do
  # 要執行的動作
end
</code></pre>

<h2>撰寫自用腳本</h2>

<ol>
<li>如果單純輸入 rake，就執行 default 指定的 task</li>
</ol>


<pre><code class="ruby"># Rakefile
task default: %w[test]

desc "Run Unit Test"
task :test do
  ruby "test/unittest.rb"
end
</code></pre>

<p>2.加入 namespace</p>

<pre><code class="ruby"># Rakefile
namespace :dev do
  desc "demo"
  task :demo do
    2.times do
      puts "create users"
    end
  end
end

$ rake dev:demo
</code></pre>

<h2>開發指令</h2>

<ul>
<li><code>system</code>  執行linux 指令或git 指令</li>
<li><code>raise</code> 產生錯誤，終止task</li>
<li>自己寫 method 處理使用者輸入字串</li>
<li>套用 ruby gem</li>
</ul>


<pre><code class="ruby"># Rakefile
desc "Create Folder"
task :create_folder, :folder_name do |t, args|
  if args.folder_name
    folder_name = args.folder_name
  else
    folder_name = get_stdin("Enter a name for your folder: ")
  end

  # raise 產生錯誤，終止 task
  raise "There does not input any folder name" unless folder_name

  # 使用 system 執行 linux 指令
  system "cd ~"

  # ruby FileUtils#mkdir
  mkdir "#{folder_name}"

  puts "created a folder #{folder_name}"
end

def get_stdin(message)
  print message
  STDIN.gets.chomp
end
</code></pre>

<h3>平行處理</h3>

<p>使用 <code>multitask</code> 執行 tasks</p>

<pre><code class="ruby">desc "rename pictures"
multitask :rename_picture do
 # doing rename task
end
</code></pre>

<h3>一次執行多個 tasks</h3>

<p>將要執行的 task 放入 array</p>

<pre><code class="ruby">desc "drop database"
task :drop_db do
  # drop database
end

desc "create database"
task :create_db do
  # create database
end

desc "migrate database"
task :migrate_db do
  # migrate database
end

desc "reset database"
task :reset_db =&gt; [:drop_db, :create_db, :migrate_db] do
end
</code></pre>

<h2>Rake in Rails</h2>

<p>查看 Rails Rakefile</p>

<pre><code># Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require File.expand_path('../config/application', __FILE__)

Rails.application.load_tasks
</code></pre>

<p>在 rails 中，已經規範自訂的 tasks 要寫在 lib/tasks 目錄底下，並命名為 **.rake</p>

<h3>注意</h3>

<p>在rails 中，如果有使用到 ActiveRecord，需要加上 <code>:environment</code></p>

<pre><code class="ruby">desc "Count available User"
task :count_available_user :environment do
  puts User.available_count
end
</code></pre>

<h2>Rake 應用</h2>

<ul>
<li>大量修改資料</li>
<li>刪除 db connections</li>
<li>測試簡訊功能</li>
<li>建立資料 (同 Seeds)</li>
<li>測試 apn</li>
<li>匯出、匯入資料</li>
</ul>


<h2>Rails 5</h2>

<p>Rails 5  之後，原本 rake 指令，也都搬一份到 rails 指令底下</p>

<pre><code class="ruby">$ rake db:migrate

# equivalent to

$ rails db:migrate
</code></pre>

<h2>Reference</h2>

<ul>
<li><a href="https://github.com/ruby/rake">RAKE – Ruby Make</a></li>
<li><a href="http://kaochenlong.com/2016/04/30/rake/">Ruby 語法放大鏡</a></li>
<li><a href="https://stackoverflow.com/a/825832">how to pass command line arguments to a rake task</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tap / Fetch / Dig / Try]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/01/ruby-tap-fetch-dig-try/"/>
    <updated>2017-06-01T14:44:42+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/01/ruby-tap-fetch-dig-try</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Tap</h2>

<p>從 <a href="https://ruby-doc.org/core-2.4.1/Object.html#method-i-tap">source code</a> 可以看出最後會傳回 self</p>

<p>以下分成兩個用途，分別介紹如何運用此特性</p>

<h3>用途一：調測</h3>

<p>在使用 chain 時，要查看某個過程的內容，可以使用 <code>#tap</code> 印出內容，卻又不會影響執行</p>

<pre><code class="ruby">(1..10)                .tap {|x| puts "original: #{x.inspect}"}
  .to_a                .tap {|x| puts "array: #{x.inspect}"}
  .select {|x| x%2==0} .tap {|x| puts "evens: #{x.inspect}"}
  .map { |x| x*x }     .tap {|x| puts "squares: #{x.inspect}"}
</code></pre>

<h3>用途二：簡化代碼</h3>

<p>可用在建立一個方法，要傳回一個 String/Array/Hash 的結果</p>

<pre><code class="ruby">[].tap {|i| i &lt;&lt; "abc"}
''.tap {|i| i &lt;&lt; do_some_thing }
</code></pre>

<h3>Reference</h3>

<ul>
<li><a href="https://ruby-doc.org/core-2.4.1/Object.html#method-i-tap">ruby doc - tap</a></li>
<li><a href="https://ruby-china.org/topics/5348">Rails 技巧之 tap &amp; try</a></li>
</ul>


<h2>Fetch</h2>

<blockquote><p>取不到值時，會以預設值取代，但沒設定預設值會出現 Error</p></blockquote>

<p>Hash / Array 皆有實作 <code>#fetch</code></p>

<h3>Array#fetch</h3>

<pre><code class="ruby">a = [ 11, 22, 33, 44 ]
a.fetch(1)               #=&gt; 22
a.fetch(-1)              #=&gt; 44
a.fetch(4, 'cat')        #=&gt; "cat"
a.fetch(4) { |i| i*i }   #=&gt; 16
a.fetch(5)               #=&gt; IndexError
</code></pre>

<h3>Hash#fetch</h3>

<pre><code class="ruby">h = { "a" =&gt; 100, "b" =&gt; 200 }
h.fetch("a")                            #=&gt; 100
h.fetch("z", "go fish")                 #=&gt; "go fish"
h.fetch("z") { |el| "go fish, #{el}"}   #=&gt; "go fish, z"
h.fetch("z")                            #=&gt; KeyError
</code></pre>

<h3>Reference</h3>

<ul>
<li><a href="https://ruby-doc.org/core-1.9.3/Array.html#method-i-fetch">ruby doc - array#fetch</a></li>
<li><a href="https://ruby-doc.org/core-2.2.0/Hash.html#method-i-fetch">ruby doc - hash#fetch</a></li>
</ul>


<h2>Dig</h2>

<blockquote><p>適用在多層</p>

<p>跟 #try 一樣，如果其中一層為 nil，會回傳 nil 而不會出現 Error</p></blockquote>

<p>Ruby 2.3.0</p>

<p>Hash / Array 皆有實作 <code>#dig</code></p>

<h3>Array#dig</h3>

<pre><code class="ruby">a = [[1, [2, 3]]]

a.dig(0, 1, 1)                    #=&gt; 3
a.dig(0, 0, 0)                    #=&gt; nil
</code></pre>

<h3>Hash#dig</h3>

<p>在 rails 取 params 時，會使用以下方式取值</p>

<pre><code class="ruby">name = params[:company][:owner][:name]
</code></pre>

<p>要避免遇到 nil，可改寫成</p>

<pre><code class="ruby">name = params[:company][:owner][:name] if params[:company] &amp;&amp; params[:company][:owner] &amp;&amp; params[:company][:owner][:name]
</code></pre>

<p>使用 #dig 處理</p>

<pre><code class="ruby">name = params.dig(:company, :owner, :name)
</code></pre>

<p>同樣 case 用 <code>#try</code> 的 chain，看來使用 <code>#dig</code> 比較適合</p>

<pre><code class="ruby">params.try(:[], :company).try(:[], :owner).try(:[], :name)
</code></pre>

<h3>Reference</h3>

<ul>
<li><a href="http://ruby-doc.org/core-2.3.0_preview1/Array.html#method-i-dig">ruby doc - array#dig</a></li>
<li><a href="http://ruby-doc.org/core-2.3.0_preview1/Hash.html#method-i-dig">ruby doc - hash#dig</a></li>
</ul>


<h2>try</h2>

<p>同場加映，<code>#try</code> 是屬於 Rails Object method</p>

<p>等同 <code>Object#send</code>，但 object 為 nil 時，呼叫 method <strong>會出現</strong> NoMethodError exception</p>

<p>但使用 <code>#try</code>，object 為 nil 時，會回傳 nil ，而<strong>不會出現</strong> NoMethodError exception</p>

<p>因此是一個相當實用的功能</p>

<p>最常見的例子像是我們想判斷某些動作只有管理員可以進行操作，因此我們通常會這樣寫</p>

<pre><code class="ruby">if current_user.is_admin?
    # do something
end
</code></pre>

<p>但總會遇到 current_user 有 nil 的時候，這時就適合用 <code>#try</code> 確認 current_user 是否為 nil，再去呼叫 <code>#is_admin?</code></p>

<pre><code class="ruby">if current_user.try(:is_admin?)
    # do something
end
</code></pre>

<p><code>#try</code> 也可以實現 block，如果 instance object 不為 nil</p>

<pre><code class="ruby">@person.try { |p| "#{p.first_name}" "#{p.last_name}" }
</code></pre>

<h3>Reference</h3>

<ul>
<li><a href="https://apidock.com/rails/v4.2.7/Object/try">apidock - try</a></li>
<li><a href="https://ruby-china.org/topics/5348">Rails 技巧之 tap &amp; try</a></li>
<li><a href="https://ihower.tw/rails/activesupport.html#try">ihower active support - try</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Map / Collect / Each]]></title>
    <link href="https://jamestong10.github.io/blog/2017/05/26/ruby-block-map-collect/"/>
    <updated>2017-05-26T13:51:46+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/05/26/ruby-block-map-collect</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Map / Collect</h2>

<p>一般來說，會把這兩個視為同一種功能，也有說法是map 是collect 的別名</p>

<p>stackoverflow 有針對 map 和 collect 做 benchmark，<strong>使用 map 效能會比較好</strong></p>

<p>map 和 collect 是屬於 Enumerable Module 的 methods</p>

<p>map 和 collect 會回傳新的 array，而 array 內的值是 block 執行的結果</p>

<p>Array、Hash 都有include enumerable module，就可以使用map 和 collect</p>

<pre><code class="ruby"># Array
[1,2,3].map {|x| x + 1 }
# =&gt; [2, 3, 4]

# Hash
hash = {:name =&gt; "John", :age =&gt; 30, :phone =&gt; "0910111000"}
hash.map {|key, value| value }
# =&gt; ["John", 30, "0910111000"]
</code></pre>

<h2>&amp; 是 <a href="/blog/2016/08/10/ruby-proc-lamdba-yield/">#to_proc</a> 簡化的符號</h2>

<p>在Rails 中，假設要取得所有User 的姓名，使用 map 的寫法如下</p>

<pre><code class="ruby">names = User.all.map{ |user| user[:name] }.compact
# compact: Returns a copy of self with all nil elements removed.
</code></pre>

<p>承上，簡化 <code>user[:name]</code>，可以使用<code>&amp;</code> 執行 <code>#to_proc</code>，就變成<code>&amp;:name</code></p>

<p>stackoverflow 有更詳細的<a href="https://stackoverflow.com/a/1217114">說明</a></p>

<pre><code class="ruby"># 取值
names = User.all.map(&amp;:name)
</code></pre>

<p>使用 String#upcase</p>

<pre><code class="ruby"># 轉大寫
["vanessa", "david", "thomas"].map(&amp;:upcase)
#=&gt; ["VANESSA", "DAVID", "THOMAS"]

# equivalent to
%w(vanessa david thomas).map { |s| s.upcase }
</code></pre>

<h2>跟 each 差別在哪呢？</h2>

<p>看完 map, collect 感覺跟一般常用的 each 很像，那他們的差別在哪邊呢？</p>

<p>首先 Array、Hash 都有各自實作 <code>#each</code></p>

<p>執行的方式，跟執行 block 的動作是一樣的</p>

<p><strong>主要差別在 each 是回傳self (Array、Hash)，而map 和 collect 回傳 new array</strong></p>

<h2>Reference</h2>

<ul>
<li><a href="http://motion-express.com/blog/20141010-ruby-block-map-collect">常見 block 說明和應用：do, map, collect</a></li>
<li><a href="http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby">what-does-mapname-mean-in-ruby</a></li>
<li><a href="http://stackoverflow.com/questions/5254732/difference-between-map-and-collect-in-ruby">difference-between-map-and-collect-in-ruby</a></li>
<li><a href="https://stackoverflow.com/questions/12084507/what-does-the-map-method-do-in-ruby">what-does-the-map-method-do-in-ruby</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
