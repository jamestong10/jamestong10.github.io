<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | JT's Blog]]></title>
  <link href="http://rt-tong.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://rt-tong.com/"/>
  <updated>2016-09-09T20:59:28+08:00</updated>
  <id>http://rt-tong.com/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 使用CarrierWave 上傳圖片 + 上傳AWS S3]]></title>
    <link href="http://rt-tong.com/blog/2016/09/02/carrierwave-guide-and-integration-aws-s3/"/>
    <updated>2016-09-02T14:09:46+08:00</updated>
    <id>http://rt-tong.com/blog/2016/09/02/carrierwave-guide-and-integration-aws-s3</id>
    <content type="html"><![CDATA[<h2>功能介紹</h2>

<h3>修圖軟體</h3>

<ul>
<li><a href="http://imagemagick.org/script/index.php">ImageMagick</a></li>
<li><a href="http://www.graphicsmagick.org/">GraphicsMagick</a></li>
</ul>


<h3>Gems</h3>

<ul>
<li><a href="https://github.com/minimagick/minimagick">MiniMagick</a> 透過Ruby 使用ImageMagick、GraphicsMagick 的gem</li>
<li><a href="https://github.com/rmagick/rmagick">RMagick</a> 透過Ruby 使用ImageMagick</li>
<li><a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> 上傳檔案的gem</li>
</ul>


<h2>ImageMagick</h2>

<p>需要安裝，否則後面的圖片操作都會失敗</p>

<pre><code>$ brew isntall imagemagick
</code></pre>

<p>檢查是否安裝成功</p>

<pre><code>$ convert -version
Version: ImageMagick 6.8.9-7 Q16 x86_64 2014-09-11 http://www.imagemagick.org
Copyright: Copyright (C) 1999-2014 ImageMagick Studio LLC
Features: DPC Modules
Delegates: bzlib fftw freetype jng jpeg lcms ltdl lzma png tiff xml zlib
</code></pre>

<h2>Install Gems</h2>

<pre><code># Gemfile
# 二擇一
gem 'mini_magick'
# gem 'rmagick'

gem 'carrierwave'

$ bundle install
</code></pre>

<h2>Uploader</h2>

<p>建立uploader，命名爲image （自行決定, e.g.,file, photo &hellip; etc.）</p>

<pre><code>$ rails g uploader image
</code></pre>

<p>設定Uploader</p>

<pre><code># app/uploaders/image_uploader.rb

class ImageUploader &lt; CarrierWave::Uploader::Base

  include CarrierWave::MiniMagick # 指定使用minimagick

  storage :file

  def store_dir
    "uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
  end

  # 指定圖片size (同時產生其他size :thumb, :medium)
  process :resize_to_fit =&gt; [800, 600]

  version :thumb do
    process :resize_to_fill =&gt; [200,120]
  end

  version :medium do
    process :resize_to_fill =&gt; [400,300]
  end

end
</code></pre>

<h2>Model</h2>

<p>建立Model，命名為photo （自行決定, e.g.,file, photo, dog, cat !!?? etc.）</p>

<pre><code>$ rails g model photo image:string
$ rake db:migrate
</code></pre>

<p>設定 model 的uploader</p>

<pre><code># app/models/photo.rb
class Photo &lt; ActiveRecord::Base
  mount_uploader :image, ImageUploader
end
</code></pre>

<h2>gitignore</h2>

<p>排除測試上傳的圖片</p>

<pre><code># .gitignore
public/uploads
</code></pre>

<h1>上傳AWS S3</h1>

<h2>Install Gems</h2>

<pre><code># Gemfile
gem 'fog', group: :production
</code></pre>

<h2>Uploader 設定Production 圖片透過fog 連接並儲存至AWS S3</h2>

<pre><code>if Rails.env.production?
  storage :fog
else
  storage :file
end
</code></pre>

<h2>CarrierWave 加入fog credentials 的設定</h2>

<pre><code># config/initializers/carrier_wave.rb
CarrierWave.configure do |config|
  if Rails.env.production?
    config.storage = :fog
    config.fog_credentials = {
      provider:              'AWS',
      aws_access_key_id:     ENV['AWS_ACCESS_KEY_ID'],
      aws_secret_access_key: ENV['AWS_SECRET_ACCESS_KEY'],
      region:                ENV['AWS_REGION']
    }
    config.fog_directory  =  ENV['AWS_S3_BUCKET_PRODUCTION']
  else
    config.storage :file
  end
end
</code></pre>

<h2>AWS Variables</h2>

<p>列出不同VPS 如何管理AWS 的變數</p>

<ul>
<li>Heroku : Settings > Cofig Variables</li>
<li>AWS: figrao</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Nil? | Empty? | Blank?]]></title>
    <link href="http://rt-tong.com/blog/2016/08/24/ruby-nil_empty_blank/"/>
    <updated>2016-08-24T14:09:59+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/24/ruby-nil_empty_blank</id>
    <content type="html"><![CDATA[<h2>nil?</h2>

<p>可使用在任何的<code>object</code>，檢查是否為<code>nil</code>，如果是<code>nil</code>會回傳<code>true</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = &ldquo;str&rdquo;
</span><span class='line'>b = nil&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;a.nil? # false
</span><span class='line'>b.nil? # true</span></code></pre></td></tr></table></div></figure></p>

<h2>empty?</h2>

<p>可使用在<code>String</code>、<code>Array</code>、<code>Hash</code>，如果為長度為0 會回傳<code>true</code></p>

<p>如果object 是<code>nil</code>，使用empty? 會出現<code>NoMethodError</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = &ldquo;&rdquo;
</span><span class='line'>b = []
</span><span class='line'>c = {}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;a.empty? # true
</span><span class='line'>b.empty? # true
</span><span class='line'>c.empty? # true</span></code></pre></td></tr></table></div></figure></p>

<h2>blank?</h2>

<p>這實作在Rails ，是empty? 的強化版，不受限在<code>String</code>、<code>Array</code>、<code>Hash</code>
<code>
nil.blank?    # true
false.blank?  # true
[].blank?     # true
{}.blank?     # true
"".blank?     # true
5.blank?      # false
0.blank?      # false
</code></p>

<p><strong>But</strong> 如果空白字串，會認定為<code>true</code>
<code>
"  ".blank? # false
"  ".empty? # true
</code></p>

<p>注意：如果陣列的值都是空字串或是nil，會回傳true
<code>
['',nil].blank? # ture
</code></p>

<p>可以使用.all? + blank? 的方式來檢查陣列的值
<code>
['',nil].all? &amp;:blank # true
</code></p>

<h2>present?</h2>

<p>這也是實作在Rails 但跟<code>blank?</code> 的判斷完全顛倒
<code>
nil.present?    # false
false.present?  # false
[].present?     # false
{}.present?     # false
"".present?     # false
5.present?      # true
0.present?      # true
</code></p>

<h2>總結</h2>

<p>剛剛測試的結果，已經有整理成一份表格，可以透過表格查看要使用什麼方式來檢查boolean 值~</p>

<p><img src="images/posts/2016082401.jpg" alt="nil_empty_blank_present" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Module - Namespace | Mixin | Include | Extend]]></title>
    <link href="http://rt-tong.com/blog/2016/08/08/ruby-module/"/>
    <updated>2016-08-08T15:26:54+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/08/ruby-module</id>
    <content type="html"><![CDATA[<blockquote><p>module 算是Ruby 的獨有特色，瞭解後在程式開發或是閱讀原始碼有很大的幫助</p></blockquote>

<h2>宣告</h2>

<p>示範module 內是可以包含多種內容，但實際在設計時，還是依照功能分類</p>

<pre><code># Module name 第一個字必需大寫
module Module_name
  # adding class
  class MyClass
  end

  # adding method
  def myMethod
  end

  # namespace
  module another_moudle_name
  end
end
</code></pre>

<h2>用途</h2>

<ul>
<li>NameSpace</li>
<li>Mixin</li>
</ul>


<h3>NameSpace</h3>

<p>用來區分命名空間，當有相同命名時，可透過module 區分命名空間</p>

<h3>Mixin</h3>

<p>因為Ruby Class有單一繼承的限制。所以就可透過此方法，擴充Class 的功能</p>

<p>Mixin 分成兩類：</p>

<ol>
<li><p>include：class instance 才能操作</p></li>
<li><p>extend：不需instance 就可以透過 <code>class_name.method_name</code> 操作</p></li>
</ol>


<pre><code>module Power
  def calPower(num)
    num ** num
  end
end

module StringUtil
  def repeating(num, string)
    string * num
  end
end

class Example
  include Power
  extend StringUtil
end

p Example.new.calPower(2) # 4
p Example.repeating(2,"a") # "aa"
</code></pre>

<h2>單獨操作Module</h2>

<p>以上介紹都是把module 放在class 內，再透過mixin 方式操作，但如果想要直接操作可以根據以下方式：</p>

<ul>
<li>module_function</li>
<li>self.method</li>
</ul>


<pre><code>module CompanyA
  def greeting(name)
    "Hello #{name} at CompanyA"
  end

  module_function :greeting
end

# 上下功能相同
module CompanyB
  def self.greeting(name)
    "Hello #{name} at CompanyB"
  end
end

p CompanyA.greeting("JT") # "Hello JT at CompanyA"
p CompanyB.greeting("JT") # "Hello JT at CompanyB"
</code></pre>

<h2>References</h2>

<ul>
<li>Ruby Programming ver.4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Class - Inheritance | Class_method | Instance_method | Class_eval | Instance_eval]]></title>
    <link href="http://rt-tong.com/blog/2016/08/06/ruby-class/"/>
    <updated>2016-08-06T11:42:18+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/06/ruby-class</id>
    <content type="html"><![CDATA[<blockquote><p>Ruby 萬物皆物件</p>

<p>Class 可以生成(new) 物件</p>

<p>抽象化的概念很重要</p></blockquote>

<h2>宣告</h2>

<ul>
<li>Class name 第一個字必需大寫</li>
<li>initialize 只在初始化設定</li>
<li>instance variable：以＠開頭命名，使用域在instance</li>
<li>class variable：以＠＠開頭命名，等同此class 的全域變數，也就是class 的instance 都可以存取此變數</li>
<li>class method 也可以設定pubic, protected, private 等存取權限</li>
</ul>


<pre><code>class Class_name
   def initialize(input=defalt_value)
     #...
   end

   def methodA
     #...
   end
end
</code></pre>

<p>可以使用 <code>.class</code> 查看instance 是哪個class
<code>
p [].class    # Array
p "abc".class # String
</code></p>

<h2>存取類別資料</h2>

<ul>
<li><p>method 直接設定
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MyClass
</span><span class='line'>@name&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def name  # getter
</span><span class='line'>  @name
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def name=(name) # setter
</span><span class='line'>  @name = name
</span><span class='line'>end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p></li>
<li>設定Accessor
<code>
class MyClass
attr_reader  :name  // 同MyClass#name
attr_writer  :name  // 同MyClass#name=
attr_acessor :name  // 等於以上兩種方法
end
</code></li>
</ul>


<h2>Class Method</h2>

<p>不需要instance 就可以呼叫class.method，同Java 的static</p>

<pre><code># 方法一
class &lt;&lt; MyClass
  def methodA
    puts "Hello"
  end
end

# 方法二
class MyClass
 class &lt;&lt; self
   def methodA
     puts "Hello"
   end
 end
end

# 方法三
class MyClass
  def self.methodA
    puts "Hello"
  end
end
</code></pre>

<h2>繼承</h2>

<ul>
<li>只能單一繼承，也就是一個子類別只能有一個父類別（很重要！）</li>
<li>Object 是Ruby 所有class 的父類別，而Object 繼承BasicObject</li>
<li>如果沒有繼承，Ruby 默認所有class 為Object 的子類別</li>
<li>使用<code>is_a?</code> 或<code>.instance_of?</code> 確認是否為屬於（繼承）此類別
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[].is_a?(Array)  # true
</span><span class='line'>&ldquo;&rdquo;.is_a?(String) # true&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;p [].instance_of?(Array)  # true
</span><span class='line'>p [].instance_of?(String) # false
</span><span class='line'>p &ldquo;&rdquo;.instance_of?(String) # true
</span><span class='line'>&lt;code&gt;
</span><span class='line'>- 使用 `&lt;` 繼承super class
</span><span class='line'>- 使用`super()` 呼叫父類別中同名稱的method
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>class RingAry &lt; Array
</span><span class='line'>  def &lt;a href="i"&gt;&lt;/a&gt;
</span><span class='line'>   idx = i % size
</span><span class='line'>   super(idx)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<h2>CLASS_EVAL、INSTANCE_EVAL</h2>

<ul>
<li>instance_eval 定義class method，也可以使用 &lt;&lt; 替代</li>
<li>class_eval 定義instance method
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Foo = Class.new
</span><span class='line'>Foo.class_eval do
</span><span class='line'>def class_bar
</span><span class='line'>  &ldquo;class_bar&rdquo;
</span><span class='line'>end
</span><span class='line'>end&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Foo.instance_eval do
</span><span class='line'>  def instance_bar
</span><span class='line'>    &ldquo;instance_bar&rdquo;
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>Foo.class_bar       #=&gt; undefined method ‘class_bar’ for Foo:Class
</span><span class='line'>Foo.new.class_bar   #=&gt; &ldquo;class_bar&rdquo;
</span><span class='line'>Foo.instance_bar       #=&gt; &ldquo;instance_bar&rdquo;
</span><span class='line'>Foo.new.instance_bar   #=&gt; undefined method ‘instance_bar’ for #&lt;Foo:0x7dce8&gt;</span></code></pre></td></tr></table></div></figure></p>

<h2>alias、 undef</h2>

<p>設定或取消 method 的別名</p>

<pre><code># alias origin_name new_name
# alias :origin_name :new_name
class C1
  def hello
   "hello"
  end
end

class C2 &lt; C1
  alias super_hello hello
end

p C2.new.super_hello # "hello"

# undef method
# undef :method
class C1
  def methodA
  end
end

class C2 &lt; C1
  undef methodA
  # ...
end
</code></pre>

<h2>References</h2>

<ul>
<li>Ruby Programming ver.4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Method - *argv | &block]]></title>
    <link href="http://rt-tong.com/blog/2016/08/05/ruby-method/"/>
    <updated>2016-08-05T08:36:06+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/05/ruby-method</id>
    <content type="html"><![CDATA[<blockquote><p>用來包裝邏輯處理，算是最初階的DRY 精神</p></blockquote>

<h2>語法</h2>

<pre><code>def method_name
  # logical processes
end
</code></pre>

<h2>用法</h2>

<ul>
<li>module: module_name.method_name()</li>
<li>instance_method: class_name.new.method_name()</li>
<li>class_method: class_name.method_name()</li>
</ul>


<h2>參數用法</h2>

<h3>普通參數</h3>

<ul>
<li>默認參數：不傳入值，以默認值替代，但若有使用除了<strong>第一個參數</strong>外，其餘皆需設定默認值</li>
<li><code>*argv</code>：傳入不定長度的普通參數</li>
<li><code>&amp;block</code>：編寫要執行的邏輯 (Proc)</li>
</ul>


<pre><code># *argv
def sum(a,b=0,*argv)
  sum = a + b
  argv.each { |num| sum += num } if argv
  return sum
 end

p sum(10)          # 10
p sum(10,10)       # 20
p sum(10,10,10)    # 30
p sum(10,10,10,10) # 40


# &amp;block
def def_by_myself(*argv, &amp;block)
  block.call(argv)
end

def_by_myself(('a'..'z').to_a) do |n|
  puts n.to_s.upcase
end
</code></pre>

<h2>關鍵字參數</h2>

<p>Ruby ver.2.0 加入，參數有key-value 的關係</p>

<ul>
<li>默認參數：不傳入值，則以默認值替代</li>
<li><code>**argv</code>：傳入不定長度的關鍵字參數
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def area(x: 0, y: 0, z: 0)
</span><span class='line'>return ((x&lt;em&gt;y)+(y&lt;/em&gt;z)+(z&lt;em&gt;x))&lt;/em&gt;2
</span><span class='line'>end&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;p area(x: 10)              # 0
</span><span class='line'>p area(x: 10, y:10)        # 200
</span><span class='line'>p area(x: 10, y:10, z: 10) # 600</span></code></pre></td></tr></table></div></figure></p>

<h3>組合(普通＋關鍵字)</h3>

<p>機器人都可以組合，method 也一定可以!!</p>

<pre><code>def func(a, b=0, c:0, d:0)
  # ...
end
</code></pre>

<h2>References</h2>

<ul>
<li>Ruby Programming ver.4</li>
</ul>

]]></content>
  </entry>
  
</feed>
