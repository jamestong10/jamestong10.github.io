<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | JT's Blog]]></title>
  <link href="https://jamestong10.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="https://jamestong10.github.io/"/>
  <updated>2017-06-15T00:12:06+08:00</updated>
  <id>https://jamestong10.github.io/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rake - Ruby Make]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/13/rake-ruby-make/"/>
    <updated>2017-06-13T21:33:11+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/13/rake-ruby-make</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>說明</h2>

<p>Rake is a Make-like program implemented in Ruby.</p>

<p>Tasks and dependencies are specified in standard Ruby syntax.</p>

<h2>Install</h2>

<pre><code class="ruby">$ gem install rake
</code></pre>

<p>使用 <code>-T</code> 查詢所有rake 指令</p>

<pre><code class="ruby">$ rake -T
</code></pre>

<h2>Rakefile</h2>

<p>寫 rake 很簡單，把執行的動作都寫在 Rakefile，格式如下：</p>

<pre><code class="ruby"># Rakefile

desc "描述此 rake"
task :task_name do
  # 要執行的動作
end
</code></pre>

<h2>撰寫自用腳本</h2>

<ol>
<li>如果單純輸入 rake，就執行 default 指定的 task</li>
</ol>


<pre><code class="ruby"># Rakefile
task default: %w[test]

desc "Run Unit Test"
task :test do
  ruby "test/unittest.rb"
end
</code></pre>

<p>2.加入 namespace</p>

<pre><code class="ruby"># Rakefile
namespace :dev do
  desc "demo"
  task :demo do
    2.times do
      puts "create users"
    end
  end
end

$ rake dev:demo
</code></pre>

<h2>開發指令</h2>

<ul>
<li><code>system</code>  執行linux 指令或git 指令</li>
<li><code>raise</code> 產生錯誤，終止task</li>
<li>自己寫 method 處理使用者輸入字串</li>
<li>套用 ruby gem</li>
</ul>


<pre><code class="ruby"># Rakefile
desc "Create Folder"
task :create_folder, :folder_name do |t, args|
  if args.folder_name
    folder_name = args.folder_name
  else
    folder_name = get_stdin("Enter a name for your folder: ")
  end

  # raise 產生錯誤，終止 task
  raise "There does not input any folder name" unless folder_name

  # 使用 system 執行 linux 指令
  system "cd ~"

  # ruby FileUtils#mkdir
  mkdir "#{folder_name}"

  puts "created a folder #{folder_name}"
end

def get_stdin(message)
  print message
  STDIN.gets.chomp
end
</code></pre>

<h3>平行處理</h3>

<p>使用 <code>multitask</code> 執行 tasks</p>

<pre><code class="ruby">desc "rename pictures"
multitask :rename_picture do
 # doing rename task
end
</code></pre>

<h3>一次執行多個 tasks</h3>

<p>將要執行的 task 放入 array</p>

<pre><code class="ruby">desc "wash teeth"
task :was_teeth do;end

desc "wash face"
task :was_face do;end

desc "get up"
task :get_up =&gt; [:wash_teeth, :wash_face] do
end
</code></pre>

<h2>Rake in Rails</h2>

<p>查看 Rails Rakefile</p>

<pre><code># Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require File.expand_path('../config/application', __FILE__)

Rails.application.load_tasks
</code></pre>

<h3>注意</h3>

<p>在rails 中，如果有使用到 ActiveRecord，需要加上 <code>:environment</code></p>

<pre><code class="ruby">desc "Count available User"
task :count_available_user :environment do
  puts User.available_count
end
</code></pre>

<h2>Rake 應用</h2>

<ul>
<li>大量修改資料</li>
<li>刪除 db connections</li>
<li>測試簡訊功能</li>
<li>建立資料 (同 Seeds)</li>
<li>測試 apn</li>
<li>匯出、匯入資料</li>
</ul>


<h2>Rails 5</h2>

<p>Rails 5  之後，原本 rake 指令，也都搬一份到 rails 指令底下</p>

<pre><code class="ruby">$ rake db:migrate

# equivalent to

$ rails db:migrate
</code></pre>

<p>References</p>

<ul>
<li><a href="https://github.com/ruby/rake">RAKE – Ruby Make</a></li>
<li><a href="http://kaochenlong.com/2016/04/30/rake/">Ruby 語法放大鏡</a></li>
</ul>


<p>在 rails 中，已經規範自訂的 tasks 要寫在 lib/tasks 目錄底下，並命名為 **.rake</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tap / Fetch / Dig / Try]]></title>
    <link href="https://jamestong10.github.io/blog/2017/06/01/ruby-tap-fetch-dig-try/"/>
    <updated>2017-06-01T14:44:42+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/06/01/ruby-tap-fetch-dig-try</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Tap</h2>

<p>從 <a href="https://ruby-doc.org/core-2.4.1/Object.html#method-i-tap">source code</a> 可以看出最後會傳回 self</p>

<p>以下分成兩個用途，分別介紹如何運用此特性</p>

<h3>用途一：調測</h3>

<p>在使用 chain 時，要查看某個過程的內容，可以使用 <code>#tap</code> 印出內容，卻又不會影響執行</p>

<pre><code class="ruby">(1..10)                .tap {|x| puts "original: #{x.inspect}"}
  .to_a                .tap {|x| puts "array: #{x.inspect}"}
  .select {|x| x%2==0} .tap {|x| puts "evens: #{x.inspect}"}
  .map { |x| x*x }     .tap {|x| puts "squares: #{x.inspect}"}
</code></pre>

<h3>用途二：簡化代碼</h3>

<p>可用在建立一個方法，要傳回一個 String/Array/Hash 的結果</p>

<pre><code class="ruby">[].tap {|i| i &lt;&lt; "abc"}
''.tap {|i| i &lt;&lt; do_some_thing }
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://ruby-doc.org/core-2.4.1/Object.html#method-i-tap">ruby doc - tap</a></li>
<li><a href="https://ruby-china.org/topics/5348">Rails 技巧之 tap &amp; try</a></li>
</ul>


<h2>Fetch</h2>

<blockquote><p>取不到值時，會以預設值取代，但沒設定預設值會出現 Error</p></blockquote>

<p>Hash / Array 皆有實作 <code>#fetch</code></p>

<h3>Array#fetch</h3>

<pre><code class="ruby">a = [ 11, 22, 33, 44 ]
a.fetch(1)               #=&gt; 22
a.fetch(-1)              #=&gt; 44
a.fetch(4, 'cat')        #=&gt; "cat"
a.fetch(4) { |i| i*i }   #=&gt; 16
a.fetch(5)               #=&gt; IndexError
</code></pre>

<h3>Hash#fetch</h3>

<pre><code class="ruby">h = { "a" =&gt; 100, "b" =&gt; 200 }
h.fetch("a")                            #=&gt; 100
h.fetch("z", "go fish")                 #=&gt; "go fish"
h.fetch("z") { |el| "go fish, #{el}"}   #=&gt; "go fish, z"
h.fetch("z")                            #=&gt; KeyError
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://ruby-doc.org/core-1.9.3/Array.html#method-i-fetch">ruby doc - array#fetch</a></li>
<li><a href="https://ruby-doc.org/core-2.2.0/Hash.html#method-i-fetch">ruby doc - hash#fetch</a></li>
</ul>


<h2>Dig</h2>

<blockquote><p>適用在多層</p>

<p>跟 #try 一樣，如果其中一層為 nil，會回傳 nil 而不會出現 Error</p></blockquote>

<p>Ruby 2.3.0</p>

<p>Hash / Array 皆有實作 <code>#dig</code></p>

<h3>Array#dig</h3>

<pre><code class="ruby">a = [[1, [2, 3]]]

a.dig(0, 1, 1)                    #=&gt; 3
a.dig(0, 0, 0)                    #=&gt; nil
</code></pre>

<h3>Hash#dig</h3>

<p>在 rails 取 params 時，會使用以下方式取值</p>

<pre><code class="ruby">name = params[:company][:owner][:name]
</code></pre>

<p>要避免遇到 nil，可改寫成</p>

<pre><code class="ruby">name = params[:company][:owner][:name] if params[:company] &amp;&amp; params[:company][:owner] &amp;&amp; params[:company][:owner][:name]
</code></pre>

<p>使用 #dig 處理</p>

<pre><code class="ruby">name = params.dig(:company, :owner, :name)
</code></pre>

<p>同樣 case 用 <code>#try</code> 的 chain，看來使用 <code>#dig</code> 比較適合</p>

<pre><code class="ruby">params.try(:[], :company).try(:[], :owner).try(:[], :name)
</code></pre>

<h3>References</h3>

<ul>
<li><a href="http://ruby-doc.org/core-2.3.0_preview1/Array.html#method-i-dig">ruby doc - array#dig</a></li>
<li><a href="http://ruby-doc.org/core-2.3.0_preview1/Hash.html#method-i-dig">ruby doc - hash#dig</a></li>
</ul>


<h2>try</h2>

<p>同場加映，<code>#try</code> 是屬於 Rails Object method</p>

<p>等同 <code>Object#send</code>，但 object 為 nil 時，呼叫 method <strong>會出現</strong> NoMethodError exception</p>

<p>但使用 <code>#try</code>，object 為 nil 時，會回傳 nil ，而<strong>不會出現</strong> NoMethodError exception</p>

<p>因此是一個相當實用的功能</p>

<p>最常見的例子像是我們想判斷某些動作只有管理員可以進行操作，因此我們通常會這樣寫</p>

<pre><code class="ruby">if current_user.is_admin?
    # do something
end
</code></pre>

<p>但總會遇到 current_user 有 nil 的時候，這時就適合用 <code>#try</code> 確認 current_user 是否為 nil，再去呼叫 <code>#is_admin?</code></p>

<pre><code class="ruby">if current_user.try(:is_admin?)
    # do something
end
</code></pre>

<p><code>#try</code> 也可以實現 block，如果 instance object 不為 nil</p>

<pre><code class="ruby">@person.try { |p| "#{p.first_name}" "#{p.last_name}" }
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://apidock.com/rails/v4.2.7/Object/try">apidock - try</a></li>
<li><a href="https://ruby-china.org/topics/5348">Rails 技巧之 tap &amp; try</a></li>
<li><a href="https://ihower.tw/rails/activesupport.html#try">ihower active support - try</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Map / Collect / Each]]></title>
    <link href="https://jamestong10.github.io/blog/2017/05/26/ruby-block-map-collect/"/>
    <updated>2017-05-26T13:51:46+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/05/26/ruby-block-map-collect</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Map / Collect</h2>

<p>一般來說，會把這兩個視為同一種功能，也有說法是map 是collect 的別名</p>

<p>stackoverflow 有針對 map 和 collect 做 benchmark，<strong>使用 map 效能會比較好</strong></p>

<p>map 和 collect 是屬於 Enumerable Module 的 methods</p>

<p>map 和 collect 會回傳新的 array，而 array 內的值是 block 執行的結果</p>

<p>Array、Hash 都有include enumerable module，就可以使用map 和 collect</p>

<pre><code class="ruby"># Array
[1,2,3].map {|x| x + 1 }
# =&gt; [2, 3, 4]

# Hash
hash = {:name =&gt; "John", :age =&gt; 30, :phone =&gt; "0910111000"}
hash.map {|key, value| value }
# =&gt; ["John", 30, "0910111000"]
</code></pre>

<h2>&amp; 是 <a href="https://jamestong10.github.io/blog/2016/08/10/ruby-proc-lamdba-yield/">#to_proc</a> 簡化的符號</h2>

<p>在Rails 中，假設要取得所有User 的姓名，使用 map 的寫法如下</p>

<pre><code class="ruby">names = User.all.map{ |user| user[:name] }.compact
# compact: Returns a copy of self with all nil elements removed.
</code></pre>

<p>承上，簡化 <code>user[:name]</code>，可以使用<code>&amp;</code> 執行 <code>#to_proc</code>，就變成<code>&amp;:name</code></p>

<p>stackoverflow 有更詳細的<a href="https://stackoverflow.com/a/1217114">說明</a></p>

<pre><code class="ruby"># 取值
names = User.all.map(&amp;:name)
</code></pre>

<p>使用 String#upcase</p>

<pre><code class="ruby"># 轉大寫
["vanessa", "david", "thomas"].map(&amp;:upcase)
#=&gt; ["VANESSA", "DAVID", "THOMAS"]

# equivalent to
%w(vanessa david thomas).map { |s| s.upcase }
</code></pre>

<h2>跟 each 差別在哪呢？</h2>

<p>看完 map, collect 感覺跟一般常用的 each 很像，那他們的差別在哪邊呢？</p>

<p>首先 Array、Hash 都有各自實作 <code>#each</code></p>

<p>執行的方式，跟執行 block 的動作是一樣的</p>

<p><strong>主要差別在 each 是回傳self (Array、Hash)，而map 和 collect 回傳 new array</strong></p>

<h2>References</h2>

<ul>
<li><a href="http://motion-express.com/blog/20141010-ruby-block-map-collect">常見 block 說明和應用：do, map, collect</a></li>
<li><a href="http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby">what-does-mapname-mean-in-ruby</a></li>
<li><a href="http://stackoverflow.com/questions/5254732/difference-between-map-and-collect-in-ruby">difference-between-map-and-collect-in-ruby</a></li>
<li><a href="https://stackoverflow.com/questions/12084507/what-does-the-map-method-do-in-ruby">what-does-the-map-method-do-in-ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec]]></title>
    <link href="https://jamestong10.github.io/blog/2017/05/23/rspec/"/>
    <updated>2017-05-23T11:32:44+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/05/23/rspec</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>介紹</h2>

<ul>
<li>用來測試 Ruby / Rails 的測試工具</li>
<li>程式開發過程，可以確保程式的正確性，也可以讓開發人員有效的重構</li>
<li>當成一種程式文件</li>
</ul>


<h2>慣例</h2>

<ol>
<li>一個 <em>.rb 要搭配同名的 </em>_spec.rb</li>
<li><code>#method</code> 表示 instance method, <code>.method</code> 表示class method</li>
<li>在 Rails 寫 RSpec 建議順序 Model > Controller > View</li>
</ol>


<h2>安裝</h2>

<pre><code class="ruby"># Gemfile
group :development, :test do
  gem 'rspec-rails'
end

$ rails generate rspec:install
</code></pre>

<p>設定取消自動產生 rspec</p>

<pre><code># config/application.rb

class Application &lt; Rails::Application
  config.generators do |g|
    g.controller_specs false
    g.model_specs false
    g.view_specs false
    g.helper_specs false
    g.routing_specs false
    g.request_specs false
  end
end
</code></pre>

<h2>測試指令</h2>

<ul>
<li><code>rspec</code> 全部測試</li>
<li><code>rspec spec/controllers</code> 整個資料夾測試</li>
<li><code>rspec filename_spec.rb</code> 單一檔案測試</li>
<li><code>rspec filename_spec.rb:linenumber</code> 執行某行之後的測試</li>
</ul>


<h2>輸出</h2>

<p>預設不產出文件</p>

<ul>
<li>產生document 並輸出 specdoc  文件
<code>
$ rspec spec --format documentation --out rspec_result.txt
$ rspec spec -fd -o rspec_result.txt
</code></li>
<li>輸出 html 文件
<code>
$ rspec spec --format html --out rspec_result.html
$ rspec spec -fh -o rspec_result.html
</code></li>
</ul>


<h2>Describe / Context / it</h2>

<p>RSpec 的主要區塊，所有的測試都寫在 describe 裡面，裡面則包含多個 context、it 測試</p>

<p>descirbe 超過 40 個字，就需要使用 context、it 分段，讓你的測試更明確、有條理，保持可讀性</p>

<h2>Before &amp; After</h2>

<p>同unit test 的setup 與teardown</p>

<ul>
<li>before(:each) 每段it之前執行</li>
<li>before(:all)  整段describe前只執行一次</li>
<li>after(:each)  每段it之後執行</li>
<li>after(:all)   整段describe後只執行一次</li>
</ul>


<h2>let &amp; let!</h2>

<ul>
<li>let 用到的時候再會被執行</li>
<li>let! 每個測試前都會執行</li>
</ul>


<p>建議用 let 代替 before 來建立 instance variable</p>

<p>因為 let 有 lazy load 特性，只在測項第一次用到該 variable 時被執行，並且會 cache 直到該測項結束</p>

<p>這個技巧在產生 database 內容以測試 query 和 scope 時十分好用</p>

<h2>Double / Mock Objects</h2>

<blockquote><p>建立假物件</p></blockquote>

<p>RSpec 裡面叫做 double（替身），實際為 mock objects，用來建立替身（假物件）</p>

<p><img src="/images/posts/2017052306.jpg" alt="mock" />
(source: <a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs">test-doubles&mdash;fakes-mocks-and-stubs</a>)</p>

<h3>範例：</h3>

<p>實作 ClassRoom class</p>

<pre><code class="ruby">class ClassRoom
  def initialize(students)
    @students = students
  end

  def list_student_names
    @students.map(&amp;:name).join(',')
  end

  def students_count
    @students.count
  end
end
</code></pre>

<p>使用 double 建立假物件</p>

<pre><code class="ruby">describe ClassRoom do
  it 'the list_student_names method should work correctly' do
    student1 = double('student')
    student2 = double('student')

    class_room = ClassRoom.new [student1,student2]
    expect(class_room.students_count).to eq(2)
  end
end
</code></pre>

<h2>Stubs</h2>

<p>For replacing a method with code that returns a specified result.</p>

<blockquote><p>回傳假資料</p></blockquote>

<p>如果要驗證 「回傳值」 或驗證 「狀態改變時」 ，經常會使用 Stub 手法</p>

<p><img src="/images/posts/2017052305.jpg" alt="stub" />
(source: <a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs">test-doubles&mdash;fakes-mocks-and-stubs</a>)</p>

<h3>範例：</h3>

<p>接著 double 的範例，加入 stub 回傳假資料</p>

<pre><code class="ruby">describe ClassRoom do
  it 'the list_student_names method should work correctly' do
    student1 = double('student')
    student2 = double('student')

    # 使用 stub 回傳假資料
    student1.stub(:name).and_return('John Smith')
    student2.stub(:name).and_return('Jill Smith')

    class_room = ClassRoom.new [student1,student2]
    expect(class_room.students_count).to eq(2)
    expect(class_room.list_student_names).to eq('John Smith,Jill Smith')
  end
end
</code></pre>

<h2>Mock</h2>

<p>「模擬」 與一個 「協作者」 的互動，設立一個 「會收到指定訊息」 的期望，去驗證互動是否真的有發生</p>

<h2>Controller Specs</h2>

<p>Examples
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rails_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe TeamsController, :type =&gt; :controller do</span>
</span><span class='line'><span class="sr">  describe &amp;ldquo;GET index&amp;rdquo; do</span>
</span><span class='line'><span class="sr">    it &amp;ldquo;assigns @teams&amp;rdquo; do</span>
</span><span class='line'><span class="sr">      team = Team.create</span>
</span><span class='line'><span class="sr">      get :index</span>
</span><span class='line'><span class="sr">      expect(assigns(:teams)).to eq([team])</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">it</span> <span class="s2">&quot;renders the index template&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Matchers</p>

<ul>
<li><p>render_template
<code>
expect(response).to render_template(:new)
</code></p></li>
<li><p>redirect_to
<code>
expect(response).to redirect_to(location)
</code></p></li>
<li><p>have_http_status
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:created</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;success 就有四種寫法 XD&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:success</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;page not found&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>be_a_new
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:widget</span><span class="p">)</span> <span class="err">表示</span> <span class="n">action</span> <span class="err">要回傳的</span> <span class="vi">@widget</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;be_a_new 只是否等同 Widget.new&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:widget</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a_new</span><span class="p">(</span><span class="no">Widget</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<h2>Model Specs</h2>

<p>Examples</p>

<p>使用 reload 重新載入資料</p>

<pre><code class="ruby">require "rails_helper"

describe Post, :type =&gt; :model do
  context "with 2 or more comments" do
    it "orders them in reverse chronologically" do
      post = Post.create!
      comment1 = post.comments.create!(:body =&gt; "first comment")
      comment2 = post.comments.create!(:body =&gt; "second comment")
      expect(post.reload.comments).to eq([comment2, comment1])
    end
  end
end
</code></pre>

<p>取消 transactions</p>

<pre><code class="ruby">require "rails_helper"

RSpec.configure do |c|
  c.use_transactional_examples = false
  c.order = "defined"
end

describe Widget, :type =&gt; :model do
  it "has none to begin with" do
    expect(Widget.count).to eq 0
  end

  it "has one after adding one" do
    Widget.create
    expect(Widget.count).to eq 1
  end

  # 關閉 transactions，剛剛建立的 Widget 就不會消失
  it "has one after one was created in a previous example" do
    expect(Widget.count).to eq 1
  end

  after(:all) { Widget.destroy_all }
end
</code></pre>

<h2>Routing Specs</h2>

<pre><code class="ruby">describe "posts", :type =&gt; :routing do

  expect(:get =&gt; "/events").to route_to("events#index")
  expect(:get =&gt; "/widgets/1/edit").not_to be_routable

  expect(:get =&gt; "/posts/1").to route_to(
        :controller =&gt; "posts",
        :action =&gt; "show",
        :id =&gt; "1"
        )
end
</code></pre>

<h2>:type => ??</h2>

<p>設定 type 為 controller / model / routing 是 rspec metadata，可以讓 rspec 知道目前的 type</p>

<p>當然也可以在 rails_helper 加入設定，這樣就不需要再每個 spec 檔都加入 type ，只要把檔案放在對應的資料夾，就可以代表該檔案的type</p>

<p>e.g. spec/models -> 認定為 model</p>

<pre><code># rails_helper
config.infer_spec_type_from_file_location!
</code></pre>

<h2>補充：Types of test double</h2>

<p>The term “test double” is used to refer to a range of testing techniques, with the common theme that a substitute object is provided to the subject under test, taking the place of the objects it will communicate with in actual use.</p>

<ul>
<li>Dummy – a pure placeholder object with no behaviour (it doesn’t respond to any messages). This is used when a method requires an argument but doesn’t interact with it in a specific test.
Fake – a replacement object with real behaviour, but taking shortcuts that are helpful for testing purposes (a good example is using an in-memory database for faster testing of database-dependent code).</li>
<li>Stub – an object providing canned responses to specified messages.</li>
<li>Mock – an object that is given a specification of the messages that it must receive (or not receive) during the test if the test is to pass.</li>
<li>Spy – an object that records all messages it receives (assuming it is allowed to respond to them), allowing the messages it should have received to be asserted at the end of a test.</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="http://www.relishapp.com/rspec/rspec-rails/v/3-5/docs">RSpec Rails 3.5</a></li>
<li><a href="http://betterspecs.org/zh_tw/">Better Specs</a></li>
<li><a href="http://motion-express.com/trainings/rspec-rails-1">特快車-RSpec-Rails</a></li>
<li><a href="http://mgleon08.github.io/blog/2016/01/29/rspec-plus-factory-girl/">用 Rspec + Factory Girl + CircleCi 寫測試</a></li>
<li><a href="https://github.com/festime/stubs-mocks-spies-in-rspec">了解 Stubs, Mocks, and Spies</a></li>
<li><a href="https://about.futurelearn.com/blog/stubs-mocks-spies-rspec/">Stubs, Mocks and Spies in RSpec</a></li>
<li><a href="https://xdite.gitbooks.io/rspec-101/content/">RSpec on Rails 101</a></li>
<li><a href="http://blog.xdite.net/posts/2016/06/11/rspec-advanced-concept-part-1">RSpec - 進階測試系列概念</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Forwardable (Delegator)]]></title>
    <link href="https://jamestong10.github.io/blog/2017/05/10/ruby-forwardable/"/>
    <updated>2017-05-10T14:02:58+08:00</updated>
    <id>https://jamestong10.github.io/blog/2017/05/10/ruby-forwardable</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>ruby method 是一行程式碼且執行動作跟 method_name 相同，就可以使用 forwardable 簡化</p></blockquote>

<h2>語法</h2>

<pre><code># Define method as delegator instance method with an optional alias name ali.
# Method calls to ali will be delegated to accessor.method.
def_instance_delegator(accessor, method, ali = method)

# Shortcut for defining multiple delegator methods,
# but with no provision for using a different name.
def_instance_delegators(accessor, *methods)

# 定義單一個 method, alias for: def_instance_delegator
def_delegator(accessor, method, ali = method)

# 定義多個 methods, alias for: def_instance_delegators
def_delegators(accessor, *methods)
</code></pre>

<h2>範例</h2>

<pre><code># 一般 class Queue
class Queue
  def initialize
    @q = []
  end

  def push(val)
    @q.push(val)
  end
  def shift
    @q.shift
  end
  def size
    @q.size
  end
end

# 使用forwardable 可以把method 優化
require 'forwardable'

class Queue
  extend Forwardable
  def initialize
    @q = []
  end

  def_delegator :@q, :push
  def_delegator :@q, :shift
  def_delegator :@q, :size
end

# 更可以一次宣告多個
class Queue
  extend Forwardable
  def initialize
    @q = []
  end

  def_delegators :@q, :push, :shift, :size
end
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/forwardable/rdoc/Forwardable.html">ruby-doc Forwardable</a></li>
<li><a href="https://www.saturnflyer.com/blog/ruby-forwardable-deep-dive">ruby-forwardable-deep-dive</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
