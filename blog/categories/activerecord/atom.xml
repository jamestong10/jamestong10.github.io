<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Activerecord | JT's Blog]]></title>
  <link href="http://rt-tong.com/blog/categories/activerecord/atom.xml" rel="self"/>
  <link href="http://rt-tong.com/"/>
  <updated>2017-05-09T17:13:31+08:00</updated>
  <id>http://rt-tong.com/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Module - Calculations]]></title>
    <link href="http://rt-tong.com/blog/2016/08/25/activerecord-module-calculations/"/>
    <updated>2016-08-25T10:44:12+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/25/activerecord-module-calculations</id>
    <content type="html"><![CDATA[<blockquote><p>擷取常用的methods</p></blockquote>

<!-- more -->


<h2>Pluck</h2>

<p>使用<a href="http://apidock.com/rails/ActiveRecord/Calculations/pluck">pluck</a> 查詢想要的欄位資料，值已陣列回傳，值的類別同欄位型別(如果可以)</p>

<p>也可以傳入sql 指令，例如：Distinct</p>

<pre><code>Person.all.map(&amp;:name)

# equal to

Person.pluck(:name)
# SELECT people.name FROM people
# =&gt; ["A", "B", "C"]

Person.pluck(:id, :name)
# SELECT people.id, people.name FROM people
# =&gt; [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]

Person.pluck('DISTINCT role')
# SELECT DISTINCT role FROM people
# =&gt; ['admin', 'member', 'guest']

Person.where(age: 21).limit(5).pluck(:id)
# SELECT people.id FROM people WHERE people.age = 21 LIMIT 5
# =&gt; [2, 3]

Person.pluck('DATEDIFF(updated_at, created_at)')
# SELECT DATEDIFF(updated_at, created_at) FROM people
# =&gt; ['0', '27761', '173']
</code></pre>

<blockquote><p>與select 的差別在於，select 會取出model object，而pluck 只取出module value</p></blockquote>

<p>使用Benchmark 測試一下兩者的執行時間</p>

<pre><code>puts Benchmark.measure { User.select(:id).to_a }
# User Load (0.6ms)  SELECT "users"."id" FROM "users"
# 0.010000   0.000000   0.010000 (  0.014949)

puts Benchmark.measure { User.pluck(:id) }
# (0.8ms)  SELECT "users"."id" FROM "users"
# 0.000000   0.000000   0.000000 (  0.004965)
</code></pre>

<p>相較之下，pluck 的執行速度會比select 快</p>

<p>是因為select 還要把結果轉model object，但是pluck 單純把結果轉array</p>

<p>結論：如果只要單純取欄位的資料，請選擇<code>pluck</code></p>

<h2>Count</h2>

<p><a href="http://apidock.com/rails/v4.2.1/ActiveRecord/Calculations/count">Count</a> the records</p>

<pre><code>Person.count
# =&gt; the total count of all people

Person.count(:age)
# =&gt; returns the total count of all people whose age is present in database

Person.count(:all)
# =&gt; performs a COUNT(*) (:all is an alias for '*')

Person.distinct.count(:age)
# =&gt; counts the number of different age values
</code></pre>

<p>使用group 會回傳Hash 值，並以key = column value, value = count amount 的方式表示</p>

<pre><code>Person.group(:city).count
# =&gt; { 'Rome' =&gt; 5, 'Paris' =&gt; 3 }
</code></pre>

<p>如果group 多個欄位，那key 就是欄位的組合</p>

<pre><code>Article.group(:status, :category).count
# =&gt;  {["draft", "business"]=&gt;10, ["draft", "technology"]=&gt;4,
       ["published", "business"]=&gt;0, ["published", "technology"]=&gt;2}
</code></pre>

<p>使用select 則是回傳select 後的筆數</p>

<blockquote><p>並非所有正確的select 都會產生正確的count。會根據database 而有所不同。</p></blockquote>

<pre><code>Person.select(:age).count
# =&gt; counts the number of different age values
</code></pre>

<h2>Maximum/Minimum</h2>

<p><a href="http://apidock.com/rails/v4.2.1/ActiveRecord/Calculations/maximum">Maximum</a> 找出查詢欄位的最大值，查詢結果會根據欄位型別產生對應的物件類別，無資料則回傳<code>nil</code></p>

<pre><code>Person.maximum(:age) # =&gt; 93
</code></pre>

<p>同上，但是<a href="http://apidock.com/rails/v4.2.1/ActiveRecord/Calculations/minimum">Minimum</a>查詢最小值</p>

<pre><code>Person.minimum(:age) # =&gt; 7
</code></pre>

<h2>Sum/Average</h2>

<p><a href="http://apidock.com/rails/ActiveRecord/Calculations/sum">Sum</a> 計算查詢欄位的總和，無資料則回傳0</p>

<pre><code>Person.sum(:age) # =&gt; 4562
</code></pre>

<p><a href="http://apidock.com/rails/ActiveRecord/Calculations/average">Average</a> 計算欄位的平均值，無資料則回傳<code>nil</code></p>

<pre><code>Person.average(:age) # =&gt; 35.8
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://apidock.com/rails/ActiveRecord/Calculations/">ActiveRecord-Calculations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Module - Enum]]></title>
    <link href="http://rt-tong.com/blog/2016/08/22/activerecord-module-enum/"/>
    <updated>2016-08-22T17:17:21+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/22/activerecord-module-enum</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>ActiveRecord::Enum</h2>

<h3>目的</h3>

<p>宣告文字用來說明欄位中數字的意義，以下介紹兩種方式，也可順便解釋使用enum 的好處</p>

<p>假設Conversation 有個status 的欄位，建立常數，使用Hash 表示 0、1，分別代表active、archived</p>

<h3>w/o Enum</h3>

<pre><code>module Conversation
  STATUS = { 0 =&gt; "active", 1 =&gt; "archived" }
end

conversation = Conversation.last
STATUS[conversation.status] # active or archived
</code></pre>

<h3>w/ Enum</h3>

<blockquote><p>官方建議：欄位必須建立預設值</p></blockquote>

<pre><code>class Conversation &lt; ActiveRecord::Base
  enum status: {
    active: 0,
    archived: 1
  }
end
</code></pre>

<p>查看總共有哪些狀態(名字加複數)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Conversation.statuses&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;{ &ldquo;active&rdquo;=&gt;0, &ldquo;archived&rdquo;=&gt;1 }&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>查看目前狀態
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;conversation = Conversation.last
</span><span class='line'>conversatino.active!
</span><span class='line'>conversation.status # active</span></code></pre></td></tr></table></div></figure></p>

<p>變更欄位狀態
<code>
conversation = Conversation.last
conversatino.archived!
conversatino.archived?  #true
</code></p>

<p>查詢是否為此狀態
<code>
conversation = Conversation.last
conversatino.active!
conversatino.active?    #true
conversatino.archived?  #false
</code></p>

<p>當作where 查詢條件
<code>
Conversation.where(status: [:active, :archived])
</code></p>

<p>加入<em>prefix
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Conversation &lt; ActiveRecord::Base
</span><span class='line'>  enum comments_status: [:active, :inactive], &lt;/em&gt;prefix: :comments
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;conversation.comments_inactive!
</span><span class='line'>conversation.comments_active? # =&gt; false</span></code></pre></td></tr></table></div></figure></p>

<p>加入<em>suffix
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Conversation &lt; ActiveRecord::Base
</span><span class='line'>  enum status: [:active, :archived], &lt;/em&gt;suffix: true
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;conversation.active_status!
</span><span class='line'>conversation.archived_status? # =&gt; false</span></code></pre></td></tr></table></div></figure></p>

<p>轉成陣列 (options_for_select)
<code>
Conversation.statuses.invert.to_a # [[0, "active"], [1, "archived"]]
</code></p>

<h3>優點</h3>

<ul>
<li>database 仍儲存數字代碼，查詢速度較快</li>
<li>程式部分仍可以使用文字方式開發，提高閱讀性</li>
</ul>


<h3>References</h3>

<ul>
<li><a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html">ActiveRecord::Enum</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
