<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JT's Blog]]></title>
  <link href="http://rt-tong.com/atom.xml" rel="self"/>
  <link href="http://rt-tong.com/"/>
  <updated>2016-08-24T22:53:47+08:00</updated>
  <id>http://rt-tong.com/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - Nil? | Empty? | Blank?]]></title>
    <link href="http://rt-tong.com/blog/2016/08/24/ruby-nil_empty_blank/"/>
    <updated>2016-08-24T14:09:59+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/24/ruby-nil_empty_blank</id>
    <content type="html"><![CDATA[<h2>nil?</h2>

<p>可使用在任何的<code>object</code>，檢查是否為<code>nil</code>，如果是<code>nil</code>會回傳<code>true</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = "str"
</span><span class='line'>b = nil
</span><span class='line'>
</span><span class='line'>a.nil? # false
</span><span class='line'>b.nil? # true</span></code></pre></td></tr></table></div></figure>


<h2>empty?</h2>

<p>可使用在<code>String</code>、<code>Array</code>、<code>Hash</code>，如果為長度為0 會回傳<code>true</code></p>

<p>如果object 是<code>nil</code>，使用empty? 會出現<code>NoMethodError</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = ""
</span><span class='line'>b = []
</span><span class='line'>c = {}
</span><span class='line'>
</span><span class='line'>a.empty? # true
</span><span class='line'>b.empty? # true
</span><span class='line'>c.empty? # true</span></code></pre></td></tr></table></div></figure>


<h2>blank?</h2>

<p>這實作在Rails ，是empty? 的強化版，不受限在<code>String</code>、<code>Array</code>、<code>Hash</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nil.blank?    # true
</span><span class='line'>false.blank?  # true
</span><span class='line'>[].blank?     # true
</span><span class='line'>{}.blank?     # true
</span><span class='line'>"".blank?     # true
</span><span class='line'>5.blank?      # false
</span><span class='line'>0.blank?      # false</span></code></pre></td></tr></table></div></figure>


<p><strong>But</strong> 如果空白字串，會認定為<code>true</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"  ".blank? # false
</span><span class='line'>"  ".empty? # true</span></code></pre></td></tr></table></div></figure>


<p>注意：如果陣列的值都是空字串或是nil，會回傳true</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>['',nil].blank? # ture</span></code></pre></td></tr></table></div></figure>


<p>可以使用.all? + blank? 的方式來檢查陣列的值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>['',nil].all? &:blank # true</span></code></pre></td></tr></table></div></figure>


<h2>present?</h2>

<p>這也是實作在Rails 但跟<code>blank?</code> 的判斷完全顛倒</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nil.present?    # false
</span><span class='line'>false.present?  # false
</span><span class='line'>[].present?     # false
</span><span class='line'>{}.present?     # false
</span><span class='line'>"".present?     # false
</span><span class='line'>5.present?      # true
</span><span class='line'>0.present?      # true</span></code></pre></td></tr></table></div></figure>


<h2>總結</h2>

<p>剛剛測試的結果，已經有整理成一份表格，可以透過表格查看要使用什麼方式來檢查boolean 值~</p>

<p><img src="images/posts/2016082401.jpg" alt="nil_empty_blank_present" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Module - Enum]]></title>
    <link href="http://rt-tong.com/blog/2016/08/22/activerecord-modules/"/>
    <updated>2016-08-22T17:17:21+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/22/activerecord-modules</id>
    <content type="html"><![CDATA[<h2>ActiveRecord::Enum</h2>

<h3>目的</h3>

<p>宣告文字用來說明欄位中數字的意義，以下介紹兩種方式，也可順便解釋使用enum 的好處</p>

<p>假設Conversation 有個status 的欄位，建立常數，使用Hash 表示 0、1，分別代表active、archived</p>

<h3>w/o Enum</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module Conversation
</span><span class='line'>  STATUS = { 0 =&gt; "active", 1 =&gt; "archived" }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>conversation = Conversation.last
</span><span class='line'>STATUS[conversation.status] # active or archived</span></code></pre></td></tr></table></div></figure>


<h3>w/ Enum</h3>

<blockquote><p>官方建議：欄位必須建立預設值</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Conversation &lt; ActiveRecord::Base
</span><span class='line'>  enum status: {
</span><span class='line'>    active: 0,
</span><span class='line'>    archived: 1
</span><span class='line'>  }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>查看總共有哪些狀態(名字加複數)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Conversation.statuses
</span><span class='line'># { "active"=&gt;0, "archived"=&gt;1 }</span></code></pre></td></tr></table></div></figure>


<p>查看目前狀態</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>conversation = Conversation.last
</span><span class='line'>conversatino.active!
</span><span class='line'>conversation.status # active</span></code></pre></td></tr></table></div></figure>


<p>變更欄位狀態</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>conversation = Conversation.last
</span><span class='line'>conversatino.archived!
</span><span class='line'>conversatino.archived?  #true</span></code></pre></td></tr></table></div></figure>


<p>查詢是否為此狀態</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>conversation = Conversation.last
</span><span class='line'>conversatino.active!
</span><span class='line'>conversatino.active?    #true
</span><span class='line'>conversatino.archived?  #false</span></code></pre></td></tr></table></div></figure>


<p>當作where 查詢條件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Conversation.where(status: [:active, :archived])</span></code></pre></td></tr></table></div></figure>


<p>加入_prefix</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Conversation &lt; ActiveRecord::Base
</span><span class='line'>  enum comments_status: [:active, :inactive], _prefix: :comments
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>conversation.comments_inactive!
</span><span class='line'>conversation.comments_active? # =&gt; false</span></code></pre></td></tr></table></div></figure>


<p>加入_suffix</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Conversation &lt; ActiveRecord::Base
</span><span class='line'>  enum status: [:active, :archived], _suffix: true
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>conversation.active_status!
</span><span class='line'>conversation.archived_status? # =&gt; false</span></code></pre></td></tr></table></div></figure>


<p>轉成陣列 (options_for_select)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Conversation.statuses.invert.to_a # [[0, "active"], [1, "archived"]]</span></code></pre></td></tr></table></div></figure>


<h3>優點</h3>

<ul>
<li>database 仍儲存數字代碼，查詢速度較快</li>
<li>程式部分仍可以使用文字方式開發，提高閱讀性</li>
</ul>


<h3>References</h3>

<ul>
<li><a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html">ActiveRecord::Enum</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[邏輯思維 EP.184 - 怎麼樣成為一個高手]]></title>
    <link href="http://rt-tong.com/blog/2016/08/21/logic-show-184/"/>
    <updated>2016-08-21T10:54:21+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/21/logic-show-184</id>
    <content type="html"><![CDATA[<p><img src="http://rt-tong.com/images/posts/2016082101.jpg" alt="Logic Show" /></p>

<blockquote><p>本集雖說是如何成為一個高手，但實質是說明學習的目的和如何自己建立一套有效的學習方法</p>

<p>「學習」的本質就是脫離舒適區</p>

<p>學習的過程就是把新東西和自己原來的結構縫在一起</p>

<p>純為個人心得筆記</p></blockquote>

<h2>先說見解</h2>

<ol>
<li>評論性見解：各自提出見解，但不解決問題</li>
<li>工程學見解：拆解為具體的行為，把問題解決掉</li>
</ol>


<h2>刻意練習</h2>

<h3>練習</h3>

<ul>
<li>基本功（套路）：知識罐頭，把前人已經搞明白的東西，抽象為一個非常簡潔的東西，然後我們拿來就用

<ul>
<li>套路一：書上找不到，但這行的前輩總結<strong>最值錢的經驗</strong></li>
<li>套路二：<strong>概念</strong>了解清晰的內涵和外延，其實你把整坨的知識全部拿到手，因此在累積知識的過程，一定要學這些概念，把它打磨清楚</li>
</ul>
</li>
<li><p>真正的練習：把大的知識體系拆碎，成為一個個小模塊（知識罐頭），然後分頭練習，這才是真正的練習。例如：吉他演奏家，就要練爬格子、鋼琴演奏家，就要練哈農指法訓練、運動選手，某個特定球員身上某個特定的肌肉群訓練。簡言之，<strong>學習別人的套路</strong></p></li>
<li><p>除了套路，最關鍵還是要<strong>反覆地重複訓練</strong>，因為大腦就是要靠重複訓練，來產生神經網路</p></li>
<li><p>總結：針對性重複地練習，就是練習的本質 :+1:</p></li>
</ul>


<h3>刻意</h3>

<ul>
<li><p>持續不斷做你不會做的事 （這很重要，所以說三遍!!!）</p></li>
<li><p>心理學界把人的學習分成三個區：舒適區（都擅長）> 學習區/脫離舒適區 > 恐慌區（都不會）</p></li>
<li><p>刻意去學習，也才會成爲高手，例如：玩遊戲，圖個爽只是被遊戲玩，反而要脫離舒適，專研地圖或是計算遊戲公式，才能成為高手</p></li>
<li><p>脫離舒適：不是找完全看不懂的天書，而是找對自己專業有挑戰的書，這樣讀書才真正有效</p></li>
<li><p>以Tiger Woods 為例：在揮竿時，如果覺得受到干擾或出現意外狀況，可以立刻停止揮竿。永遠不讓自己進入舒適區，平時訓練經常找高難度的情形，任何一個動作都進入失控狀態，他要去控制每個動作</p></li>
<li><p>對專業高爾夫球選手來說，Tiger 這是特別厲害的能力，畢竟揮竿早就成為肌肉記憶，下意識的動作，看起來非常熟練，但本質上也是失控的，因為大腦已經起不了作用，萬一如果球場出現意外狀況，肯定是打不好的</p></li>
<li><p>基本訓練：可以透過長久訓練，帶入舒適區，形成肌肉記憶</p></li>
<li><p>中國教育：以考試為中心，一個確定性的結局，因此成績好的學生，只要將考試的內容背的滾瓜爛熟，誘導自己進入舒適區，但高考狀元在事業發展反而不太順利</p></li>
<li><p>其實工作能力就是學習能力：因為在舒適區待久了，對新知識的強烈挑戰慾望，沒有學生時期那麼強</p></li>
<li><p>以Zuckerberg 為例：他的行為就是不斷挑戰非舒適區，每一年都給自己下一個全新的任務，2010 學中文、2011 只吃自己親手殺死的動物、2012 重新學習自己寫程式&hellip;</p></li>
<li><p>一般人要如何成為高手：讓自己進入一個好的學習環境，被動的被脫離舒適區，進入學習區</p></li>
<li><p>什麼是好的學習環境：能夠即時提供回饋的環境，就是你每個微小的進步，外界都會給你回饋，告訴你對還是錯。例如：上網寫小說，讀者能夠即時給予回饋、籃球教練，針對為小錯誤的動作給予回饋、貝爾實驗室，有個不成文規定，只要年輕人問問題，不能迴避，必須給予回答</p></li>
<li><p>研究所的教授或導師，英文稱為adviser，字也能翻成顧問，也就是導師不斷的對我們所做的事情，提供即時的回饋，導師的本質其實是顧問的角色</p></li>
<li><p>師徒制是未來人類學習的總方向：互相切搓學問，任何一點增長或疑問，都能得到及時回饋</p></li>
</ul>


<h2>學習過程</h2>

<ul>
<li><p>以此書討論網路與學習過程<a href="http://www.books.com.tw/products/CN10715146">淺薄︰互聯網如何毒化了我們的大腦</a></p></li>
<li><p>網路的出現，使人類學習構建一種障礙，甚至是一點點地摧毀深度思考的能力</p></li>
<li><p>網路讓知識來源變得豐富，但對於學習者或閱讀者，帶來另一種負擔，要不斷地選擇做什麼的決策，這都是被聰明人所設計一種套路</p></li>
<li><p>Google：讓使用者可快速做決策，透過搜尋讓使用者快進快出，也是他們的核心策略，如此廣告才能賺錢</p></li>
<li><p>網路讓人類進入一種非常沈重的決策負擔，人類是由大腦前額葉做出理性的決策，但前額葉不負責學習，也就是選擇的時候，並沒有在學習</p></li>
<li><p>真正在學習的大腦：不斷把新的訊息和原本的知識結構縫接，在編制一個密不可分的網絡，所有的高手特點是，看到新的東西，馬上跟自己腦中的記憶結合</p></li>
<li><p>信息：一堆碎的東西</p></li>
<li><p>知識：必須是信息形成結構，互相之間形成關聯之後，再進入庫存，這才叫知識</p></li>
<li><p>每個信息在高手腦子里，是活的且有關聯的，而且和他的實踐操作有關係</p></li>
<li><p>真正的高手，家裡不藏書，但有做筆記</p></li>
<li><p>筆記是什麼：把書裡面的信息跟自己記憶結構，正在生長的結構對接出來的產物，就是一個人大腦的外掛</p></li>
<li><p>儲存想看的網路文章：實際上，儲存起來，就不會再打開，因此要強迫自己去看，並且得寫一個心得，目的是為了跟這個知識形成一次互動，也就是學習</p></li>
<li><p>例如：看美劇學英文，如果只是看中英字幕，永遠學不會的，應該把單字或句子做成筆記，跟知識有互動</p></li>
<li><p>人類不僅創造工具，工具也反過來塑造人類，世上出現一個新工具，一定連接產生兩個結果，一是工具帶來便利性，二是把人類分成兩群，一群是享受工具的舒適區，另一群則是帶著工具產生新的可能，探索文明的新邊疆，例如：自動翻譯機，一群人就是不需要苦學英文，享受自動翻譯，另一群人就帶著這個深入了解外國人的主流社會</p></li>
<li><p>大部分人智商都差不多的，只有極～少部份人是高智商或低智商，但認知就不同，是冪律分佈，只有極少的人能到達認知的高層，背後是通過不斷的練習，不斷獲得認知的回饋，也就不斷提高認知</p></li>
</ul>


<h2>Youtube</h2>

<ul>
<li><a href="https://www.youtube.com/watch?v=4JhlfRAzVKY">https://www.youtube.com/watch?v=4JhlfRAzVKY</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Proc - Lamdba | Yield]]></title>
    <link href="http://rt-tong.com/blog/2016/08/10/ruby-proc-lamdba-yield/"/>
    <updated>2016-08-10T00:07:13+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/10/ruby-proc-lamdba-yield</id>
    <content type="html"><![CDATA[<blockquote><p>繼<a href="http://rt-tong.com/blog/2016/08/05/ruby-method/">Ruby Method</a> <code>&amp;block</code> 提到要傳入 <a href="http://ruby-doc.org/core-2.3.1/Proc.html">Proc Class</a> 執行邏輯運算</p>

<p>順便寫一篇記錄Proc Class 的基本應用，不是很好入門，但是多看幾次就能慢慢了解其中意義</p></blockquote>

<h2>Proc</h2>

<p>Proc 為一種<strong>匿名</strong>區塊(Block) 物件，根據傳入的參數執行邏輯運算</p>

<p>如果傳入數量與宣告不同，則以<code>nil</code> 替代</p>

<h3>宣告 &amp; 執行</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 宣告1
</span><span class='line'>proc1 = Proc.new do |x|
</span><span class='line'>    puts x
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># 宣告2
</span><span class='line'>proc2 = proc do |x|
</span><span class='line'>    puts x
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Proc#call
</span><span class='line'>proc1.call("hello world")  # hello world
</span><span class='line'>
</span><span class='line'># Proc#[]
</span><span class='line'>proc2["hey, how are you?"] # hey, how are you?</span></code></pre></td></tr></table></div></figure>


<h3>Feature of Closure</h3>

<p>可透過Proc 達到closure 的目的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def counter
</span><span class='line'> c=0
</span><span class='line'> Proc.new do c += 1 end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>c1 = counter
</span><span class='line'>c2 = counter
</span><span class='line'>
</span><span class='line'>c1.call # 1
</span><span class='line'>c1.call # 2
</span><span class='line'>c2.call # 1</span></code></pre></td></tr></table></div></figure>


<h2>Lambda</h2>

<p>Proc 的另一種寫法，稱為lambda。創建出來的也是Proc 物件，通過lambda 建立的Proc 其行為更接近method。</p>

<h3>宣告 &amp; 執行</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lambda1 = lambda do |x|
</span><span class='line'>  return x
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>lambda1.call("hello world")
</span><span class='line'>lambda1["hey, ok"]
</span><span class='line'>
</span><span class='line'># 另一種宣告方式 -&gt;(參數) { 邏輯處理 }
</span><span class='line'>lambda2 = -&gt;(x) { return x * 2 }
</span><span class='line'>lambda2.call("hello world")
</span><span class='line'>lambda2["ok, fine!"]</span></code></pre></td></tr></table></div></figure>


<h3>與Proc 差異</h3>

<ol>
<li>傳入參數數量需與宣告時一致</li>
<li><strong>(重要)可以使用return 將值傳回 (Proc 遇到return  就會跳出區域並結束)</strong></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def power_of(n)
</span><span class='line'>  lambda do |x|
</span><span class='line'>    return x ** n
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>cube = power_of(3)
</span><span class='line'>cube.call(5)  # 125
</span><span class='line'>
</span><span class='line'># using Proc
</span><span class='line'>def power_of(n)
</span><span class='line'>  Proc.new do |x|
</span><span class='line'>    return x ** n
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>cube = power_of(3)
</span><span class='line'>cube.call(5)  # LocalJumpError</span></code></pre></td></tr></table></div></figure>


<h3>to_proc 方法</h3>

<p>有些object 可以使用<code>#to_proc</code>，如果傳入的參數有加上 <code>&amp;</code> Symbol，則#to_proc 就會自動調用，進而生成Proc Object</p>

<p>可能需要一點時間熟悉這樣的寫法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%w(42 52 14).map { |n| n.to_i }
</span><span class='line'>
</span><span class='line'># 上下相同
</span><span class='line'>
</span><span class='line'>%w(42 52 14).map(&:to_i)</span></code></pre></td></tr></table></div></figure>


<h2>yield</h2>

<p>蠻頭痛的，這題不知道要寫在ruby method 還是在這，但思考之後，認為先有了Proc 的觀念，再來討論這個，或許會更了解吧！</p>

<p>這有點類似 Java 的abstract class，將method 要實作的部分放<code>yield</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def my_method_no_arg
</span><span class='line'>  puts "warm up 1"
</span><span class='line'>  yield
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def my_method_with_arg
</span><span class='line'>  puts "warm up 2"
</span><span class='line'>  # yield('james')
</span><span class='line'>  yield(%W(a b))
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_method_no_arg do
</span><span class='line'>  puts "running alone"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_method_with_arg do |friends|
</span><span class='line'>    # puts friends.class
</span><span class='line'>    if friends.class == String
</span><span class='line'>      puts "running with #{friends}"
</span><span class='line'>    else
</span><span class='line'>      friends.each do |friend|
</span><span class='line'>        puts "running with #{friend}"
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h2>總結</h2>

<ul>
<li><code>yield = &amp;block + block.call()</code></li>
<li><code>&amp;block = Proc | Lambda</code></li>
</ul>


<h2>References</h2>

<ul>
<li>RailsFun.tw 新手教學</li>
<li>Ruby Programming ver.4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Module - Namespace | Mixin | Include | Extend]]></title>
    <link href="http://rt-tong.com/blog/2016/08/08/ruby-module/"/>
    <updated>2016-08-08T15:26:54+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/08/ruby-module</id>
    <content type="html"><![CDATA[<blockquote><p>module 算是Ruby 的獨有特色，瞭解後在程式開發或是閱讀原始碼有很大的幫助</p></blockquote>

<h2>宣告</h2>

<p>示範module 內是可以包含多種內容，但實際在設計時，還是依照功能分類</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Module name 第一個字必需大寫
</span><span class='line'>module Module_name
</span><span class='line'>  # adding class
</span><span class='line'>  class MyClass
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  # adding method
</span><span class='line'>  def myMethod
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  # namespace
</span><span class='line'>  module another_moudle_name
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>用途</h2>

<ul>
<li>NameSpace</li>
<li>Mixin</li>
</ul>


<h3>NameSpace</h3>

<p>用來區分命名空間，當有相同命名時，可透過module 區分命名空間</p>

<h3>Mixin</h3>

<p>因為Ruby Class有單一繼承的限制。所以就可透過此方法，擴充Class 的功能</p>

<p>Mixin 分成兩類：</p>

<ol>
<li><p>include：class instance 才能操作</p></li>
<li><p>extend：不需instance 就可以透過 <code>class_name.method_name</code> 操作</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module Power
</span><span class='line'>  def calPower(num)
</span><span class='line'>    num ** num
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>module StringUtil
</span><span class='line'>  def repeating(num, string)
</span><span class='line'>    string * num
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class Example
</span><span class='line'>  include Power
</span><span class='line'>  extend StringUtil
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>p Example.new.calPower(2) # 4
</span><span class='line'>p Example.repeating(2,"a") # "aa"</span></code></pre></td></tr></table></div></figure>


<h2>單獨操作Module</h2>

<p>以上介紹都是把module 放在class 內，再透過mixin 方式操作，但如果想要直接操作可以根據以下方式：</p>

<ul>
<li>module_function</li>
<li>self.method</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module CompanyA
</span><span class='line'>  def greeting(name)
</span><span class='line'>    "Hello #{name} at CompanyA"
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  module_function :greeting
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># 上下功能相同
</span><span class='line'>module CompanyB
</span><span class='line'>  def self.greeting(name)
</span><span class='line'>    "Hello #{name} at CompanyB"
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>p CompanyA.greeting("JT") # "Hello JT at CompanyA"
</span><span class='line'>p CompanyB.greeting("JT") # "Hello JT at CompanyB"</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li>Ruby Programming ver.4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Class - Inheritance | Class_method | Instance_method | Class_eval | Instance_eval]]></title>
    <link href="http://rt-tong.com/blog/2016/08/06/ruby-class/"/>
    <updated>2016-08-06T11:42:18+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/06/ruby-class</id>
    <content type="html"><![CDATA[<blockquote><p>Ruby 萬物皆物件</p>

<p>Class 可以生成(new) 物件</p>

<p>抽象化的概念很重要</p></blockquote>

<h2>宣告</h2>

<ul>
<li>Class name 第一個字必需大寫</li>
<li>initialize 只在初始化設定</li>
<li>instance variable：以＠開頭命名，使用域在instance</li>
<li>class variable：以＠＠開頭命名，等同此class 的全域變數，也就是class 的instance 都可以存取此變數</li>
<li>class method 也可以設定pubic, protected, private 等存取權限</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Class_name
</span><span class='line'>   def initialize(input=defalt_value)
</span><span class='line'>     #...
</span><span class='line'>   end
</span><span class='line'>
</span><span class='line'>   def methodA
</span><span class='line'>     #...
</span><span class='line'>   end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>可以使用 <code>.class</code> 查看instance 是哪個class</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p [].class    # Array
</span><span class='line'>p "abc".class # String</span></code></pre></td></tr></table></div></figure>


<h2>存取類別資料</h2>

<ul>
<li>method 直接設定</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MyClass
</span><span class='line'>  @name
</span><span class='line'>
</span><span class='line'>  def name  # getter
</span><span class='line'>    @name
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def name=(name) # setter
</span><span class='line'>    @name = name
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>設定Accessor</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MyClass
</span><span class='line'>  attr_reader  :name  // 同MyClass#name
</span><span class='line'>  attr_writer  :name  // 同MyClass#name=
</span><span class='line'>  attr_acessor :name  // 等於以上兩種方法
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>Class Method</h2>

<p>不需要instance 就可以呼叫class.method，同Java 的static</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 方法一
</span><span class='line'>class &lt;&lt; MyClass
</span><span class='line'>  def methodA
</span><span class='line'>    puts "Hello"
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># 方法二
</span><span class='line'>class MyClass
</span><span class='line'> class &lt;&lt; self
</span><span class='line'>   def methodA
</span><span class='line'>     puts "Hello"
</span><span class='line'>   end
</span><span class='line'> end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># 方法三
</span><span class='line'>class MyClass
</span><span class='line'>  def self.methodA
</span><span class='line'>    puts "Hello"
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>繼承</h2>

<ul>
<li>只能單一繼承，也就是一個子類別只能有一個父類別（很重要！）</li>
<li>Object 是Ruby 所有class 的父類別，而Object 繼承BasicObject</li>
<li>如果沒有繼承，Ruby 默認所有class 為Object 的子類別</li>
<li>使用<code>is_a?</code> 或<code>.instance_of?</code> 確認是否為屬於（繼承）此類別</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[].is_a?(Array)  # true
</span><span class='line'>"".is_a?(String) # true
</span><span class='line'>
</span><span class='line'>p [].instance_of?(Array)  # true
</span><span class='line'>p [].instance_of?(String) # false
</span><span class='line'>p "".instance_of?(String) # true</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用 <code>&lt;</code> 繼承super class</li>
<li>使用<code>super()</code> 呼叫父類別中同名稱的method</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class RingAry &lt; Array
</span><span class='line'>  def [](i)
</span><span class='line'>   idx = i % size
</span><span class='line'>   super(idx)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>CLASS_EVAL、INSTANCE_EVAL</h2>

<ul>
<li>instance_eval 定義class method，也可以使用 &lt;&lt; 替代</li>
<li>class_eval 定義instance method</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Foo = Class.new
</span><span class='line'>Foo.class_eval do
</span><span class='line'>  def class_bar
</span><span class='line'>    "class_bar"
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Foo.instance_eval do
</span><span class='line'>  def instance_bar
</span><span class='line'>    "instance_bar"
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>Foo.class_bar       #=&gt; undefined method ‘class_bar’ for Foo:Class
</span><span class='line'>Foo.new.class_bar   #=&gt; "class_bar"
</span><span class='line'>Foo.instance_bar       #=&gt; "instance_bar"
</span><span class='line'>Foo.new.instance_bar   #=&gt; undefined method ‘instance_bar’ for #&lt;Foo:0x7dce8&gt;</span></code></pre></td></tr></table></div></figure>


<h2>alias、 undef</h2>

<p>設定或取消 method 的別名</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># alias origin_name new_name
</span><span class='line'># alias :origin_name :new_name
</span><span class='line'>class C1
</span><span class='line'>  def hello
</span><span class='line'>   "hello"
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class C2 &lt; C1
</span><span class='line'>  alias super_hello hello
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>p C2.new.super_hello # "hello"
</span><span class='line'>
</span><span class='line'># undef method
</span><span class='line'># undef :method
</span><span class='line'>class C1
</span><span class='line'>  def methodA
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class C2 &lt; C1
</span><span class='line'>  undef methodA
</span><span class='line'>  # ...
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li>Ruby Programming ver.4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Method - *argv | &block]]></title>
    <link href="http://rt-tong.com/blog/2016/08/05/ruby-method/"/>
    <updated>2016-08-05T08:36:06+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/05/ruby-method</id>
    <content type="html"><![CDATA[<blockquote><p>用來包裝邏輯處理，算是最初階的DRY 精神</p></blockquote>

<h2>語法</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def method_name
</span><span class='line'>  # logical processes
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>用法</h2>

<ul>
<li>module: module_name.method_name()</li>
<li>instance_method: class_name.new.method_name()</li>
<li>class_method: class_name.method_name()</li>
</ul>


<h2>參數用法</h2>

<h3>普通參數</h3>

<ul>
<li>默認參數：不傳入值，以默認值替代，但若有使用除了<strong>第一個參數</strong>外，其餘皆需設定默認值</li>
<li><code>*argv</code>：傳入不定長度的普通參數</li>
<li><code>&amp;block</code>：編寫要執行的邏輯 (Proc)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># *argv
</span><span class='line'>def sum(a,b=0,*argv)
</span><span class='line'>  sum = a + b
</span><span class='line'>  argv.each { |num| sum += num } if argv
</span><span class='line'>  return sum
</span><span class='line'> end
</span><span class='line'>
</span><span class='line'>p sum(10)          # 10
</span><span class='line'>p sum(10,10)       # 20
</span><span class='line'>p sum(10,10,10)    # 30
</span><span class='line'>p sum(10,10,10,10) # 40
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># &block
</span><span class='line'>def def_by_myself(*argv, &block)
</span><span class='line'>  block.call(argv)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def_by_myself(('a'..'z').to_a) do |n|
</span><span class='line'>  puts n.to_s.upcase
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>關鍵字參數</h2>

<p>Ruby ver.2.0 加入，參數有key-value 的關係</p>

<ul>
<li>默認參數：不傳入值，則以默認值替代</li>
<li><code>**argv</code>：傳入不定長度的關鍵字參數</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def area(x: 0, y: 0, z: 0)
</span><span class='line'>  return ((x*y)+(y*z)+(z*x))*2
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>p area(x: 10)              # 0
</span><span class='line'>p area(x: 10, y:10)        # 200
</span><span class='line'>p area(x: 10, y:10, z: 10) # 600</span></code></pre></td></tr></table></div></figure>


<h3>組合(普通＋關鍵字)</h3>

<p>機器人都可以組合，method 也一定可以!!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def func(a, b=0, c:0, d:0)
</span><span class='line'>  # ...
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li>Ruby Programming ver.4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic of Ruby]]></title>
    <link href="http://rt-tong.com/blog/2016/08/04/ruby-basic/"/>
    <updated>2016-08-04T10:41:35+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/04/ruby-basic</id>
    <content type="html"><![CDATA[<h2>必須知道的網站</h2>

<ol>
<li><a href="http://ruby-doc.org/">http://ruby-doc.org/</a>

<ol>
<li>core：核心程式，也就是執行ruby 一定要載入的程式</li>
<li>std-lib：標準套件，要使用require 載入，例如：Time</li>
</ol>
</li>
<li><a href="https://www.ruby-toolbox.com/">https://www.ruby-toolbox.com/</a>

<ol>
<li>ruby gems</li>
<li>D.R.Y. 不要自己造輪子</li>
</ol>
</li>
</ol>


<h2>Ruby Object</h2>

<p>Ruby 萬物皆物件，所以要先知道物件屬於什麼Class，有哪些methods 可以使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ "123".class
</span><span class='line'>$ String.methods
</span><span class='line'># 如果method 不熟，就可以到doc 查詢說明與用法</span></code></pre></td></tr></table></div></figure>


<h2>基本型別</h2>

<p>Fixnum/Bignum, Float, Array, String, Nil, True, False</p>

<h2>變數命名規則</h2>

<ul>
<li>local variable：以英文字或是下底線開頭</li>
<li>global variable：以$ 開頭</li>
<li>instance variable：以＠開頭命名</li>
<li>class variable：以＠＠開頭命名</li>
<li>constant：常量，為全英文大寫命名，常用設定環境變數</li>
</ul>


<h2>多重賦值</h2>

<p>只要等號兩邊結構一致，在複雜的結構，多重賦值皆可輕鬆對應</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a,b,c = 1,2,3
</span><span class='line'>
</span><span class='line'>a,*b,c = 1,2,3,4,5,6
</span><span class='line'># [1,[2,3,4,5],6]
</span><span class='line'>
</span><span class='line'>a,b,*c = 1,2,3,4,5,6
</span><span class='line'># [1,2,[3,4,5,6]
</span><span class='line'>
</span><span class='line'># 交換值
</span><span class='line'>a,b=0,1
</span><span class='line'>a,b=b,a
</span><span class='line'>
</span><span class='line'># 分配陣列值
</span><span class='line'>ary = [1,2]
</span><span class='line'>a,b = ary
</span><span class='line'>
</span><span class='line'># 取得槽狀陣列元素
</span><span class='line'>ary = [1,[2,3],4]
</span><span class='line'>a,b,c = ary
</span><span class='line'>
</span><span class='line'># 取得槽狀陣列組合
</span><span class='line'>ary = [1,[2,3],4]
</span><span class='line'>a,(b1,b2),c = ary</span></code></pre></td></tr></table></div></figure>


<h2>三元判斷式(if)</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if x &gt; 10
</span><span class='line'>  puts "bigger"
</span><span class='line'>else
</span><span class='line'>  puts "smaller"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># 上下相同
</span><span class='line'>(x&gt;10) ? "bigger" : "smaller"</span></code></pre></td></tr></table></div></figure>


<h2>if Condition, unless Condition</h2>

<p>if 和unless 可以放在希望執行的程式後面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts "a is bigger than b" if a &gt; b
</span><span class='line'>
</span><span class='line'>puts "a is bigger than b" unless a &lt; b</span></code></pre></td></tr></table></div></figure>


<h2>Array</h2>

<p>使用<code>[]</code>表示</p>

<h2>Hash</h2>

<p>key, value 的組合，使用<code>{}</code>表示</p>

<h2>Symbol vs. String</h2>

<ul>
<li>每建立一個String 物件，就會產生一個新的String 物件</li>
<li>Symbol 是有名字的物件，一個名字只會有一個，不可修改(immutable)，也不能賦予值，當作hash key</li>
<li><a href="http://stackoverflow.com/questions/2341837/understanding-symbols-in-ruby">#很多人也搞不懂Symbol</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># String
</span><span class='line'>3.times { puts "foo".object_id }
</span><span class='line'># 70094949931660
</span><span class='line'># 70094949931540
</span><span class='line'># 70094949931480
</span><span class='line'>
</span><span class='line'># Symbol-1
</span><span class='line'>3.times { puts :foo.object_id }
</span><span class='line'># 1149788
</span><span class='line'># 1149788
</span><span class='line'># 1149788
</span><span class='line'>
</span><span class='line'># Symbol-2
</span><span class='line'>present1 = { :toy =&gt; "cars"}
</span><span class='line'>present2 = { :toy =&gt; "dolls"}
</span><span class='line'>p present1[:toy] # cars
</span><span class='line'>p present2[:toy] # dolls</span></code></pre></td></tr></table></div></figure>


<h2>深入了解Classes</h2>

<p>如果在使用上有問題，可以到<a href="http://ruby-doc.org/core-2.3.1/">Ruby Doc</a> Classes 查看說明</p>

<h2>References</h2>

<ul>
<li>RailsFun.tw 新手教學</li>
<li>Ruby Programming ver.4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands]]></title>
    <link href="http://rt-tong.com/blog/2016/08/01/git-commands/"/>
    <updated>2016-08-01T00:43:42+08:00</updated>
    <id>http://rt-tong.com/blog/2016/08/01/git-commands</id>
    <content type="html"><![CDATA[<blockquote><p>本篇並非Git 教學，只是記錄常用的Git 指令，有學到新的指令會再更新上來
如果不太熟悉可在指令後加入 &ndash;help 查詢用法</p></blockquote>

<h2>Git 基本設定</h2>

<p>查詢設定資訊</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --list</span></code></pre></td></tr></table></div></figure>


<p>設定全域的使用者與Email (個人使用)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name [author_name]
</span><span class='line'>git config --global user.email [contact_email_address]</span></code></pre></td></tr></table></div></figure>


<p>設定區域的使用者與Email (參與計劃或公司專案)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd local_repo
</span><span class='line'>git config --local user.name [author_name]
</span><span class='line'>git config --local user.email [contact_email_address]</span></code></pre></td></tr></table></div></figure>


<p>設定別名</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global alias.st status   # git st
</span><span class='line'>$ git config --global alias.ci commit   # git ci
</span><span class='line'>$ git config --global alias.co checkout # git co
</span><span class='line'>$ git config --global alias.br branch   # git br</span></code></pre></td></tr></table></div></figure>


<p>建立一個全新的Git Repository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init --bare project_name.git</span></code></pre></td></tr></table></div></figure>


<p>本機建立新的repository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init</span></code></pre></td></tr></table></div></figure>


<p>查看工作區(Working Directory)的異動紀錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status
</span><span class='line'>$ git st</span></code></pre></td></tr></table></div></figure>


<p>查看檔案異動差異</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff</span></code></pre></td></tr></table></div></figure>


<p>加入暫存區</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add [--] [file_path | file_name]</span></code></pre></td></tr></table></div></figure>


<p>提交並加上註解</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m [comments]</span></code></pre></td></tr></table></div></figure>


<p>開啟editor 修改近期已經commit 的註解 (建議少用，除非必要)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit --amend</span></code></pre></td></tr></table></div></figure>


<p>儲存工作：專案開發到一半，要去別的brach，可使用stash 把修改記錄暫存起來</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git stash</span></code></pre></td></tr></table></div></figure>


<p>查看暫存的紀錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git stash list</span></code></pre></td></tr></table></div></figure>


<p>取回暫存的紀錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git apply
</span><span class='line'>
</span><span class='line'># 取回較舊的暫存紀錄
</span><span class='line'>$ git stash apply stash@{2}</span></code></pre></td></tr></table></div></figure>


<p>刪除暫存紀錄：apply 只是取回紀錄，但沒有執行刪除的動作</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git stash drop [stash_name]</span></code></pre></td></tr></table></div></figure>


<p>快速修正前一次 commit 的錯誤，只要修 typo 之後打這行，就會替換掉前一次的 commit-level-operations</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -C HEAD -a –amend</span></code></pre></td></tr></table></div></figure>


<p>查看提交紀錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log</span></code></pre></td></tr></table></div></figure>


<p>砍掉commit 重來</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reset [--soft | --hard] [-q] [&lt;commit&gt;]
</span><span class='line'>
</span><span class='line'>$ git reset --soft HEAD^ # HEAD^ 表示前一個版本</span></code></pre></td></tr></table></div></figure>


<p>soft: commit 內容會退回暫存區(staging area)，並保留工作區(working directory)</p>

<p>hard: 工作區(working directory) 與暫存區(staging area) 會更新到指定的commit 狀態</p>

<h2>Git Branch</h2>

<p>列出所有分支且正在使用哪個分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch</span></code></pre></td></tr></table></div></figure>


<p>建立新的分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch [branch_name]</span></code></pre></td></tr></table></div></figure>


<p>切換分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout [branch_name]</span></code></pre></td></tr></table></div></figure>


<p>建立新的分支並切換到此分支 (等於 git branch + git checkout)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -b [branch_name]</span></code></pre></td></tr></table></div></figure>


<p>修改分支名稱與刪除分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch -m [old_branch_name] [new_branch_name]
</span><span class='line'>$ git branch -d [branch_name]</span></code></pre></td></tr></table></div></figure>


<h2>Git Merge &amp; Git Rebase</h2>

<h3>觀念：只要branch 調整完畢，應先將master merge 至branch，測試無誤後，在merge 回master</h3>

<blockquote><p>merge 分支的功能加master，同時會產生新的HEAD</p></blockquote>

<p>合併分支到master</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout master
</span><span class='line'>$ git merge feature1
</span><span class='line'>
</span><span class='line'># 上下相同
</span><span class='line'>$ git merge master feature1</span></code></pre></td></tr></table></div></figure>


<blockquote><p>rebase 是基於某一分支的內容合併，又稱為分支衍合，一樣是合併的動作，但是會銜接著mater 最新的狀態</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout [branch]
</span><span class='line'>$ git rebase master</span></code></pre></td></tr></table></div></figure>


<p>Merge v.s. Rebase</p>

<p><strong>使用時機：如果conflict 較多時，建議使用merge</strong></p>

<p>假設以下例子要做合併，可以看出merge與rebase 有何差異</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maser:  A -&gt; B -&gt; C
</span><span class='line'>branch: D -&gt; E
</span><span class='line'>
</span><span class='line'>after rebase: A -&gt; B -&gt; C -&gt; D -&gt; E
</span><span class='line'>after merge:  A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F</span></code></pre></td></tr></table></div></figure>


<h2>Git Remote</h2>

<p>列出當初加入遠端儲存庫時指定的名稱</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote</span></code></pre></td></tr></table></div></figure>


<p>本機加入遠端repository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add [remote_name] [url]</span></code></pre></td></tr></table></div></figure>


<p>修改遠端repository url</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote set-url [new_remote_name] [url]</span></code></pre></td></tr></table></div></figure>


<p>拷貝一個已經存在的repository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone [repository_url]</span></code></pre></td></tr></table></div></figure>


<p>變更遠端簡稱</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote rename [old_remote_name] [new_remote_name]</span></code></pre></td></tr></table></div></figure>


<p>查看remote 資訊</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote show [remote_name]</span></code></pre></td></tr></table></div></figure>


<p>移除遠端repository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote remove [remote_name]</span></code></pre></td></tr></table></div></figure>


<p>上傳至遠端repository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push [remote_name] [branch_name]</span></code></pre></td></tr></table></div></figure>


<p>合併遠端repository 至本機</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git pull [remote_name] [branch_name]
</span><span class='line'>
</span><span class='line'># 上下相同
</span><span class='line'>
</span><span class='line'>$ git pull</span></code></pre></td></tr></table></div></figure>


<h2>實用資訊</h2>

<ul>
<li><a href="https://github.com/RailsApps/rails-composer/blob/master/files/gitignore.txt">gitignore lists</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://git-scm.com/doc">GitDoc</a></li>
<li><a href="https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf">Git cheat sheet</a></li>
<li><a href="https://ihower.tw/git/basic.html">ihower Git Basic</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/commit-level-operations">tutorial reset, checkout, revert</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Enum]]></title>
    <link href="http://rt-tong.com/blog/2016/07/28/java-enum/"/>
    <updated>2016-07-28T00:44:15+08:00</updated>
    <id>http://rt-tong.com/blog/2016/07/28/java-enum</id>
    <content type="html"><![CDATA[<h2>在J2SE 5.0 之前，沒有Enum</h2>

<p>使用<code>static</code>與<code>final</code>兩個修飾詞建立常數變數</p>

<ul>
<li>static：class variable, class 未被instance 就被宣告完成且可以使用、所有class 是參考同一個變數</li>
<li>final：使用之後此變數即是常數，無法被繼承也無法被修改</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Class StateMachines {
</span><span class='line'>    public static final String ORDER_PLACED = "1";
</span><span class='line'>    public static final String PAID = "2";
</span><span class='line'>    public static final String SHIPPING = "3";
</span><span class='line'>    public static final String SHIPPED = "4";
</span><span class='line'>    public static final String ORDER_CANCELLED = "5";
</span><span class='line'>    public static final String GOOD_RETURNED = "6";
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Enum 使用方法</h2>

<ol>
<li>定義常數，例如要定義購買流程狀態，就定出已下訂、已付款&hellip;等代碼</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public enum StateMachines {
</span><span class='line'>    ORDER_PLACED,PAID,SHIPPING,SHIPPED,ORDER_CANCELLED,GOOD_RETURNED;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>定義常數內容、overriding、switch case</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public enum StateMachines {
</span><span class='line'>      ORDER_PLACED(1),PAID(2),SHIPPING(3),SHIPPED(4),ORDER_CANCELLED(5),GOOD_RETURNED(6);
</span><span class='line'>
</span><span class='line'>        private int step;
</span><span class='line'>
</span><span class='line'>        private Direction(int step) {
</span><span class='line'>          this.step = step;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        @Override
</span><span class='line'>        public String toString() {
</span><span class='line'>          return String.valueOf(this.step);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        public String getChName() {
</span><span class='line'>          switch(this) {
</span><span class='line'>          case ORDER_PLACED:
</span><span class='line'>            return "已下訂";
</span><span class='line'>          case PAID:
</span><span class='line'>            return "已付款";
</span><span class='line'>            // 略
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>結論</h2>

<ol>
<li>enum 不可繼承其他類別</li>
<li>可新增method 在enum 內</li>
<li>可overriding 原enum 的method</li>
<li>switch 可使用enum 作為判斷</li>
<li>歸納同性質的常數，並可以衍生共用method</li>
<li>常數的泛型化應用</li>
</ol>


<h2>References:</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html">Enum Java Docs</a></li>
<li><a href="http://www.cnblogs.com/happyPawpaw/archive/2013/04/09/3009553.html">Java enum的用法详解</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Octopress and Github to Write Blog]]></title>
    <link href="http://rt-tong.com/blog/2016/07/26/octopress-plus-github/"/>
    <updated>2016-07-26T13:51:55+08:00</updated>
    <id>http://rt-tong.com/blog/2016/07/26/octopress-plus-github</id>
    <content type="html"><![CDATA[<h2>新增GitHub Repository</h2>

<p>點選<a href="https://github.com/new">new</a> 建立新的Repository，命名為 username.github.io</p>

<h2>取得Octopress</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:imathis/octopress.git username.github.io
</span><span class='line'>$ cd username.github.io
</span><span class='line'>$ bundle install</span></code></pre></td></tr></table></div></figure>


<h2>設定GitHub Repository Pages</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake setup_github_pages
</span><span class='line'>
</span><span class='line'># (For example, 'git@github.com:your_username/your_username.github.io.git)
</span><span class='line'>#            or 'https://github.com/your_username/your_username.github.io')</span></code></pre></td></tr></table></div></figure>


<h2>安裝預設主題</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake install</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Octopress 已經安裝好了！可以執行<code>$rake preview</code>，輸入<a href="http://localhost:4000/">http://localhost:4000/</a> 在本機看一下效果！</p></blockquote>

<h2>新增BitBucket Repository</h2>

<ol>
<li>不想讓使用者看到編輯中的文章或是編輯紀錄</li>
<li>節省成本暫不考慮GitHub Private 方案
BitBucket 點選<a href="https://bitbucket.org/repo/create">Create</a> 建立新的Repository，命名為username.github.com，在本機加入remote repository</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add bitbucket git@bitbucket.org:username/username.github.io.git
</span><span class='line'>
</span><span class='line'># push to bitbucket
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "Initial Commit"
</span><span class='line'>$ git push -u bitbucket --all</span></code></pre></td></tr></table></div></figure>


<h2>新增文章</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post
</span><span class='line'># Enter a title for your post:
</span><span class='line'>
</span><span class='line'># 上下相同
</span><span class='line'>$ rake new_post['article-title']</span></code></pre></td></tr></table></div></figure>


<h2>預覽文章</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake preview</span></code></pre></td></tr></table></div></figure>


<h2>產生網頁與發佈文章</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h2>其他</h2>

<h3><em>安裝其他主題</em></h3>

<p>可到<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Wiki</a> 選擇喜歡的主題</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake install['主題名稱']
</span><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<h3>Octopress 設定檔</h3>

<p>可參考<a href="http://octopress.org/docs/configuring/">官網設定說明</a>調整設定檔</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># _config.yml
</span><span class='line'>url:                # For rewriting urls for RSS, etc
</span><span class='line'>title:              # Used in the header and title tags
</span><span class='line'>subtitle:           # A description used in the header
</span><span class='line'>author:             # Your name, for RSS, Copyright, Metadata
</span><span class='line'>simple_search:      # Search engine for simple site search
</span><span class='line'>description:        # A default meta description for your site
</span><span class='line'>date_format:        # Format dates using Ruby's date strftime syntax
</span><span class='line'>subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
</span><span class='line'>subscribe_email:    # Url to subscribe by email (service required)
</span><span class='line'>category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
</span><span class='line'>email:              # Email address for the RSS feed if you want it.</span></code></pre></td></tr></table></div></figure>


<h3>放入圖片</h3>

<p>存放到 /source/images，再指定圖片路徑</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![alt description](/images/upload.jpg)</span></code></pre></td></tr></table></div></figure>


<h3>增加About Me</h3>

<p>先產生about page</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_page["about"]
</span><span class='line'># source/about/index.markdown</span></code></pre></td></tr></table></div></figure>


<p>Navbar 加入about link</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /source/_includes/custom/navigation.html
</span><span class='line'>&lt;ul class="main-navigation"&gt;
</span><span class='line'>  &lt;li&gt;&lt;a href="http://rt-tong.com/"&gt;Blog&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;a href="http://rt-tong.com/blog/archives"&gt;Archives&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;a href="http://rt-tong.com/about"&gt;About&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><a href="http://blog.jex.tw/blog/2015/03/24/octopress/">使用 Octopress 寫 Blog</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
